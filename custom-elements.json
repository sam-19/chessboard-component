{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "vite.config.package.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "vite.config.package.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "vite.config.standalone.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "module": "vite.config.standalone.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/chessboard-element.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "ChessBoardElement",
          "default": "class ChessBoardElement extends LitElement { constructor() { super(...arguments); /** * Whether to show the board notation. */ this.hideNotation = false; /** * The orientation of the board. `'white'` for the white player at the bottom, * `'black'` for the black player at the bottom. */ this.orientation = 'white'; /** * If `true`, pieces on the board are draggable to other squares. */ this.draggablePieces = false; /** * If `'snapback'`, pieces dropped off the board will return to their original * square. If `'trash'`, pieces dropped off the board will be removed from the * board. * * This property has no effect when `draggable` is `false`. */ this.dropOffBoard = 'snapback'; /** * A function that renders DOM for a piece to a container element. This * function can render any elements and text, including SVG. * * The default value renders an SVG image of the piece, unless the * `pieceTheme` property is set, then it uses `pieceTheme` to get the URL for * an `<img>` element. * * @default Function */ this.renderPiece = (piece, container) => { let pieceImage = undefined; if (isString(this.pieceTheme)) { pieceImage = interpolateTemplate(this.pieceTheme, { piece: piece }); } else if (isFunction(this.pieceTheme)) { pieceImage = this.pieceTheme(piece); } if (pieceImage === undefined) { renderWikipediaSVGPiece(piece, container); } else { render(html `<img class=\"piece-image\" src=${pieceImage} />`, container); } }; /** * Animation speed for when pieces move between squares or from spare pieces * to the board. */ this.moveSpeed = DEFAULT_MOVE_SPEED; /** * Animation speed for when pieces that were dropped outside the board return * to their original square. */ this.snapbackSpeed = DEFAULT_SNAPBACK_SPEED; /** * Animation speed for when pieces \\\"snap\\\" to a square when dropped. */ this.snapSpeed = DEFAULT_SNAP_SPEED; /** * Animation speed for when pieces are removed. */ this.trashSpeed = DEFAULT_TRASH_SPEED; /** * Animation speed for when pieces appear on a square. * * Note that the \"appear\" animation only occurs when `sparePieces` is `false`. */ this.appearSpeed = DEFAULT_APPEAR_SPEED; /** * If `true`, the board will have spare pieces that can be dropped onto the * board. If `sparePieces` is set to `true`, `draggablePieces` gets set to * `true` as well. */ this.sparePieces = false; this._highlightedSquares = new Set(); this._animations = new Map(); this._currentPosition = {}; } static { this.styles = styles; } /** * The current position as a FEN string. */ get fen() { return objToFen(this._currentPosition); } /** * The current position of the board, as a `PositionObject`. This property may * be set externally, but only to valid `PositionObject`s. The value is copied * before being applied to the board. Changes to the position object are not * reflected in th rendering. * * To set the position using FEN, or a keyword like `'start'`, or to use * animations, use the `setPosition` method. */ get position() { return this._currentPosition; } set position(v) { const oldValue = this._currentPosition; this._setCurrentPosition(v); this.requestUpdate('position', oldValue); } /** * Whether to show the board notation. This is always the inverse of * `hideNotation`, which reflects the `hide-notation` attribute. * * @default true */ get showNotation() { return !this.hideNotation; } set showNotation(v) { this.hideNotation = !v; } get _squareSize() { // Note: this isn't cached, but is called during user interactions, so we // have a bit of time to use under RAIL guidelines. return this.offsetWidth / 8; } _getSquareElement(square) { return this.shadowRoot.getElementById(squareId(square)); } _getSparePieceElement(piece) { return this.shadowRoot.getElementById(sparePieceId(piece)); } // ------------------------------------------------------------------------- // DOM Building // ------------------------------------------------------------------------- render() { return html ` <div part=\"spare-pieces\"> ${this._renderSparePieces(this.orientation === 'white' ? 'black' : 'white')} </div> ${this._renderBoard()} <div part=\"spare-pieces\"> ${this._renderSparePieces(this.orientation === 'white' ? 'white' : 'black')} </div> <div id=\"dragged-pieces\" part=\"dragged-pieces\" style=${styleMap({ width: `0px`, height: `0px`, overflow: `visible`, })} > ${this._renderDraggedPiece()} </div> `; } _renderSparePieces(color) { if (!this.sparePieces) { return nothing; } const pieces = color === 'black' ? blackPieces : whitePieces; // The empty <div>s below are placeholders to get the shelf to line up with // the board's grid. Another option would be to try to use the same grid, // either with a single container, or subgrid/display:contents when those // are available. return html ` <div></div> ${pieces.map((p) => html ` <div id=\"spare-${p}\" @mousedown=${this._mousedownSparePiece} @touchstart=${this._mousedownSparePiece} > ${this._renderPiece(p, {}, false, sparePieceId(p))} </div> `)} <div></div> `; } _renderDraggedPiece() { const styles = { height: `${this._squareSize}px`, width: `${this._squareSize}px`, }; const dragState = this._dragState; if (dragState !== undefined) { styles.display = 'block'; const rect = this.getBoundingClientRect(); if (dragState.state === 'dragging') { const { x, y } = dragState; Object.assign(styles, { top: `${y - rect.top - this._squareSize / 2}px`, left: `${x - rect.left - this._squareSize / 2}px`, }); } else if (dragState.state === 'snapback') { const { source } = dragState; const square = this._getSquareElement(source); const squareRect = square.getBoundingClientRect(); Object.assign(styles, { transitionProperty: 'top, left', transitionDuration: `${speedToMS(this.snapbackSpeed)}ms`, top: `${squareRect.top - rect.top}px`, left: `${squareRect.left - rect.left}px`, }); } else if (dragState.state === 'trash') { const { x, y } = dragState; Object.assign(styles, { transitionProperty: 'opacity', transitionDuration: `${speedToMS(this.trashSpeed)}ms`, opacity: '0', top: `${y - rect.top - this._squareSize / 2}px`, left: `${x - rect.left - this._squareSize / 2}px`, }); } else if (dragState.state === 'snap') { const square = this._getSquareElement(dragState.location); const squareRect = square.getBoundingClientRect(); Object.assign(styles, { transitionProperty: 'top, left', transitionDuration: `${speedToMS(this.snapSpeed)}ms`, top: `${squareRect.top - rect.top}px`, left: `${squareRect.left - rect.left}px`, }); } } return this._renderPiece(this._dragState?.piece ?? '', styles, false, undefined, 'dragged-piece'); } _renderBoard() { const squares = []; const isFlipped = this.orientation === 'black'; for (let row = 0; row < 8; row++) { for (let col = 0; col < 8; col++) { const file = COLUMNS[isFlipped ? 7 - col : col]; const rank = isFlipped ? row + 1 : 8 - row; const square = `${file}${rank}`; const squareColor = getSquareColor(square); let piece = this._currentPosition[square]; const isDragSource = square === this._dragState?.source; const animation = this._animations.get(square); const highlight = isDragSource || this._highlightedSquares.has(square) ? 'highlight' : ''; const pieceStyles = this._getAnimationStyles(piece, animation); if (!piece && animation?.type === 'clear') { // Preserve the piece until the animation is complete piece = animation.piece; } squares.push(html ` <div class=\"square\" id=${squareId(square)} data-square=${square} part=\"square ${square} ${squareColor} ${highlight}\" @mousedown=${this._mousedownSquare} @mouseenter=${this._mouseenterSquare} @mouseleave=${this._mouseleaveSquare} @touchstart=${this._mousedownSquare} > ${this.showNotation && row === 7 ? html `<div part=\"notation alpha\">${file}</div>` : nothing} ${this.showNotation && col === 0 ? html `<div part=\"notation numeric\">${rank}</div>` : nothing} ${this._renderPiece(piece, pieceStyles, isDragSource)} </div> `); } } const styles = { width: this._squareSize * 8 + 'px', height: this._squareSize * 8 + 'px', }; return html `<div part=\"board\" style=${styleMap(styles)}>${squares}</div>`; } _renderPiece(piece, styles, isDragSource, id, part) { if (piece === undefined) { return nothing; } const style = { opacity: '1', transitionProperty: '', transitionDuration: '0ms', ...styles, }; if (isDragSource || piece === '') { style.display = 'none'; } if (piece === '') { return nothing; } if (!isFunction(this.renderPiece)) { this._error(8272, 'invalid renderPiece.'); } return html ` <div id=${ifDefined(id)} part=\"piece ${part ?? ''}\" piece=${piece} style=${styleMap(style)} ...=${renderPieceDirective(piece, this.renderPiece)} ></div> `; } _getAnimationStyles(piece, animation) { if (animation) { if (piece && (animation.type === 'move-start' || (animation.type === 'add-start' && this.draggablePieces))) { // Position the moved piece absolutely at the source const srcSquare = animation.type === 'move-start' ? this._getSquareElement(animation.source) : this._getSparePieceElement(piece); const destSquare = animation.type === 'move-start' ? this._getSquareElement(animation.destination) : this._getSquareElement(animation.square); const srcSquareRect = srcSquare.getBoundingClientRect(); const destSquareRect = destSquare.getBoundingClientRect(); return { position: 'absolute', left: `${srcSquareRect.left - destSquareRect.left}px`, top: `${srcSquareRect.top - destSquareRect.top}px`, width: `${this._squareSize}px`, height: `${this._squareSize}px`, }; } if (piece && (animation.type === 'move' || (animation.type === 'add' && this.draggablePieces))) { // Transition the moved piece to the destination return { position: 'absolute', transitionProperty: 'top, left', transitionDuration: `${speedToMS(this.moveSpeed)}ms`, top: `0`, left: `0`, width: `${this._squareSize}px`, height: `${this._squareSize}px`, }; } if (!piece && animation.type === 'clear') { // Preserve and transition a removed piece to opacity 0 piece = animation.piece; return { transitionProperty: 'opacity', transitionDuration: `${speedToMS(this.trashSpeed)}ms`, opacity: '0', }; } if (piece && animation.type === 'add-start') { // Initialize an added piece to opacity 0 return { opacity: '0', }; } if (piece && animation.type === 'add') { // Transition an added piece to opacity 1 return { transitionProperty: 'opacity', transitionDuration: `${speedToMS(this.appearSpeed)}ms`, }; } } return {}; } // ------------------------------------------------------------------------- // Event Listeners // ------------------------------------------------------------------------- _mousedownSquare(e) { // do nothing if we're not draggable. sparePieces implies draggable if (!this.draggablePieces && !this.sparePieces) { return; } // do nothing if there is no piece on this square const squareEl = e.currentTarget; const square = squareEl.getAttribute('data-square'); if (square === null || !this._currentPosition.hasOwnProperty(square)) { return; } e.preventDefault(); const pos = e instanceof MouseEvent ? e : e.changedTouches[0]; this._beginDraggingPiece(square, this._currentPosition[square], pos.clientX, pos.clientY); } _mousedownSparePiece(e) { // do nothing if sparePieces is not enabled if (!this.sparePieces) { return; } const sparePieceContainerEl = e.currentTarget; const pieceEl = sparePieceContainerEl.querySelector('[part~=piece]'); const piece = pieceEl.getAttribute('piece'); e.preventDefault(); const pos = e instanceof MouseEvent ? e : e.changedTouches[0]; this._beginDraggingPiece('spare', piece, pos.clientX, pos.clientY); } _mouseenterSquare(e) { // do not fire this event if we are dragging a piece // NOTE: this should never happen, but it's a safeguard if (this._dragState !== undefined) { return; } // get the square const square = e.currentTarget.getAttribute('data-square'); // NOTE: this should never happen; defensive if (!validSquare(square)) { return; } // Get the piece on this square const piece = this._currentPosition.hasOwnProperty(square) && this._currentPosition[square]; this.dispatchEvent(new CustomEvent('mouseover-square', { bubbles: true, detail: { square, piece, position: deepCopy(this._currentPosition), orientation: this.orientation, }, })); } _mouseleaveSquare(e) { // Do not fire this event if we are dragging a piece // NOTE: this should never happen, but it's a safeguard if (this._dragState !== undefined) { return; } const square = e.currentTarget.getAttribute('data-square'); // NOTE: this should never happen; defensive if (!validSquare(square)) { return; } // Get the piece on this square const piece = this._currentPosition.hasOwnProperty(square) && this._currentPosition[square]; // execute their function this.dispatchEvent(new CustomEvent('mouseout-square', { bubbles: true, detail: { square, piece, position: deepCopy(this._currentPosition), orientation: this.orientation, }, })); } _mousemoveWindow(e) { // Do nothing if we are not dragging a piece if (!(this._dragState?.state === 'dragging')) { return; } // Prevent screen from scrolling e.preventDefault(); const pos = e instanceof MouseEvent ? e : e.changedTouches[0]; this._updateDraggedPiece(pos.clientX, pos.clientY); } _mouseupWindow(e) { // Do nothing if we are not dragging a piece if (!(this._dragState?.state === 'dragging')) { return; } const pos = e instanceof MouseEvent ? e : e.changedTouches[0]; const location = this._isXYOnSquare(pos.clientX, pos.clientY); this._stopDraggedPiece(location); } // ------------------------------------------------------------------------- // Public Methods // ------------------------------------------------------------------------- /** * Sets the position of the board. * * @param useAnimation If `true`, animate to the new position. If `false`, * show the new position instantly. */ setPosition(position, useAnimation = true) { position = normalizePozition(position); // validate position object if (!validPositionObject(position)) { throw this._error(6482, 'Invalid value passed to the position method.', position); } if (useAnimation) { // start the animations const animations = this._calculateAnimations(this._currentPosition, position); this._doAnimations(animations, this._currentPosition, position); } this._setCurrentPosition(position); this.requestUpdate(); } /** * Sets the board to the start position. * * @param useAnimation If `true`, animate to the new position. If `false`, * show the new position instantly. */ start(useAnimation) { this.setPosition('start', useAnimation); } /** * Removes all the pieces on the board. If `useAnimation` is `false`, removes * pieces instantly. * * This is shorthand for `setPosition({})`. * * @param useAnimation If `true`, animate to the new position. If `false`, * show the new position instantly. */ clear(useAnimation) { this.setPosition({}, useAnimation); } /** * Executes one or more moves on the board. * * Moves are strings the form of \"e2-e4\", \"f6-d5\", etc., Pass `false` as an * argument to disable animation. */ move(...args) { let useAnimation = true; // collect the moves into an object const moves = {}; for (const arg of args) { // any \"false\" to this function means no animations if (arg === false) { useAnimation = false; continue; } // skip invalid arguments if (!validMove(arg)) { this._error(2826, 'Invalid move passed to the move method.', arg); continue; } const [from, to] = arg.split('-'); moves[from] = to; } // calculate position from moves const newPos = calculatePositionFromMoves(this._currentPosition, moves); // update the board this.setPosition(newPos, useAnimation); // return the new position object return newPos; } /** * Flip the orientation. */ flip() { this.orientation = this.orientation === 'white' ? 'black' : 'white'; } /** * Recalculates board and square sizes based on the parent element and redraws * the board accordingly. */ resize() { this.requestUpdate(); } // ------------------------------------------------------------------------- // Lifecycle Callbacks // ------------------------------------------------------------------------- firstUpdated() { // We need to re-render to read the size of the container this.requestUpdate(); if (window.ResizeObserver !== undefined) { new ResizeObserver(() => { this.resize(); }).observe(this); } } connectedCallback() { super.connectedCallback(); window.addEventListener('mousemove', this._mousemoveWindow); window.addEventListener('mouseup', this._mouseupWindow); window.addEventListener('touchmove', this._mousemoveWindow, { passive: false, }); window.addEventListener('touchend', this._mouseupWindow, { passive: false, }); } disconnectedCallback() { super.disconnectedCallback(); window.removeEventListener('mousemove', this._mousemoveWindow); window.removeEventListener('mouseup', this._mouseupWindow); window.removeEventListener('touchmove', this._mousemoveWindow); window.removeEventListener('touchend', this._mouseupWindow); } // ------------------------------------------------------------------------- // Control Flow // ------------------------------------------------------------------------- _setCurrentPosition(position) { const oldPos = deepCopy(this._currentPosition); const newPos = deepCopy(position); const oldFen = objToFen(oldPos); const newFen = objToFen(newPos); // do nothing if no change in position if (oldFen === newFen) return; // Fire change event this.dispatchEvent(new CustomEvent('change', { bubbles: true, detail: { oldPosition: oldPos, newPosition: newPos, }, })); // update state this._currentPosition = position; } _isXYOnSquare(x, y) { // TODO: remove cast when TypeScript fixes ShadowRoot.elementsFromPoint const elements = this .shadowRoot.elementsFromPoint(x, y); const squareEl = elements.find((e) => e.classList.contains('square')); const square = squareEl === undefined ? 'offboard' : squareEl.getAttribute('data-square'); return square; } _highlightSquare(square, value = true) { if (value) { this._highlightedSquares.add(square); } else { this._highlightedSquares.delete(square); } this.requestUpdate('_highlightedSquares'); } async _snapbackDraggedPiece() { assertIsDragging(this._dragState); const { source, piece } = this._dragState; // there is no \"snapback\" for spare pieces if (source === 'spare') { return this._trashDraggedPiece(); } this._dragState = { state: 'snapback', piece, source, }; // Wait for a paint this.requestUpdate(); await new Promise((resolve) => setTimeout(resolve, 0)); return new Promise((resolve) => { const transitionComplete = () => { this._draggedPieceElement.removeEventListener('transitionend', transitionComplete); resolve(); this.dispatchEvent(new CustomEvent('snapback-end', { bubbles: true, detail: { piece, square: source, position: deepCopy(this._currentPosition), orientation: this.orientation, }, })); }; this._draggedPieceElement.addEventListener('transitionend', transitionComplete); }); } async _trashDraggedPiece() { assertIsDragging(this._dragState); const { source, piece } = this._dragState; // remove the source piece const newPosition = deepCopy(this._currentPosition); delete newPosition[source]; this._setCurrentPosition(newPosition); this._dragState = { state: 'trash', piece, x: this._dragState.x, y: this._dragState.y, source: this._dragState.source, }; // Wait for a paint this.requestUpdate(); await new Promise((resolve) => setTimeout(resolve, 0)); return new Promise((resolve) => { const transitionComplete = () => { this._draggedPieceElement.removeEventListener('transitionend', transitionComplete); resolve(); }; this._draggedPieceElement.addEventListener('transitionend', transitionComplete); }); } async _dropDraggedPieceOnSquare(square) { assertIsDragging(this._dragState); const { source, piece } = this._dragState; // update position const newPosition = deepCopy(this._currentPosition); delete newPosition[source]; newPosition[square] = piece; this._setCurrentPosition(newPosition); this._dragState = { state: 'snap', piece, location: square, source: square, }; // Wait for a paint this.requestUpdate(); await new Promise((resolve) => setTimeout(resolve, 0)); return new Promise((resolve) => { const transitionComplete = () => { this._draggedPieceElement.removeEventListener('transitionend', transitionComplete); resolve(); // Fire the snap-end event this.dispatchEvent(new CustomEvent('snap-end', { bubbles: true, detail: { source, square, piece, }, })); }; this._draggedPieceElement.addEventListener('transitionend', transitionComplete); }); } _beginDraggingPiece(source, piece, x, y) { // Fire cancalable drag-start event const event = new CustomEvent('drag-start', { bubbles: true, cancelable: true, detail: { source, piece, position: deepCopy(this._currentPosition), orientation: this.orientation, }, }); this.dispatchEvent(event); if (event.defaultPrevented) { return; } // set state this._dragState = { state: 'dragging', x, y, piece, // if the piece came from spare pieces, location is offboard location: source === 'spare' ? 'offboard' : source, source, }; this.requestUpdate(); } _updateDraggedPiece(x, y) { assertIsDragging(this._dragState); // put the dragged piece over the mouse cursor this._dragState.x = x; this._dragState.y = y; this.requestUpdate(); const location = this._isXYOnSquare(x, y); // do nothing more if the location has not changed if (location === this._dragState.location) { return; } // remove highlight from previous square if (validSquare(this._dragState.location)) { this._highlightSquare(this._dragState.location, false); } // add highlight to new square if (validSquare(location)) { this._highlightSquare(location); } this.dispatchEvent(new CustomEvent('drag-move', { bubbles: true, detail: { newLocation: location, oldLocation: this._dragState.location, source: this._dragState.source, piece: this._dragState.piece, position: deepCopy(this._currentPosition), orientation: this.orientation, }, })); // update state this._dragState.location = location; } async _stopDraggedPiece(location) { assertIsDragging(this._dragState); const { source, piece } = this._dragState; // determine what the action should be let action = 'drop'; if (location === 'offboard') { action = this.dropOffBoard === 'trash' ? 'trash' : 'snapback'; } const newPosition = deepCopy(this._currentPosition); const oldPosition = deepCopy(this._currentPosition); // source piece is a spare piece and position is on the board if (source === 'spare' && validSquare(location)) { // add the piece to the board newPosition[location] = piece; } // source piece was on the board if (validSquare(source)) { // remove the piece from the board delete newPosition[source]; // new position is on the board if (validSquare(location)) { // move the piece newPosition[location] = piece; } } // Fire the drop event // Listeners can potentially change the drop action const dropEvent = new CustomEvent('drop', { bubbles: true, detail: { source, target: location, piece, newPosition, oldPosition, orientation: this.orientation, setAction(a) { action = a; }, }, }); this.dispatchEvent(dropEvent); this._highlightedSquares.clear(); // do it! if (action === 'snapback') { await this._snapbackDraggedPiece(); } else if (action === 'trash') { await this._trashDraggedPiece(); } else if (action === 'drop') { await this._dropDraggedPieceOnSquare(location); } // clear state this._dragState = undefined; // Render the final non-dragging state this.requestUpdate(); } // ------------------------------------------------------------------------- // Animations // ------------------------------------------------------------------------- // calculate an array of animations that need to happen in order to get // from pos1 to pos2 _calculateAnimations(pos1, pos2) { // make copies of both pos1 = deepCopy(pos1); pos2 = deepCopy(pos2); const animations = []; const squaresMovedTo = {}; // remove pieces that are the same in both positions for (const i in pos2) { if (!pos2.hasOwnProperty(i)) continue; if (pos1.hasOwnProperty(i) && pos1[i] === pos2[i]) { delete pos1[i]; delete pos2[i]; } } // find all the \"move\" animations for (const i in pos2) { if (!pos2.hasOwnProperty(i)) continue; const closestPiece = findClosestPiece(pos1, pos2[i], i); if (closestPiece) { animations.push({ type: 'move', source: closestPiece, destination: i, piece: pos2[i], }); delete pos1[closestPiece]; delete pos2[i]; squaresMovedTo[i] = true; } } // \"add\" animations for (const i in pos2) { if (!pos2.hasOwnProperty(i)) { continue; } animations.push({ type: 'add', square: i, piece: pos2[i], }); delete pos2[i]; } // \"clear\" animations for (const i in pos1) { if (!pos1.hasOwnProperty(i)) continue; // do not clear a piece if it is on a square that is the result // of a \"move\", ie: a piece capture if (squaresMovedTo.hasOwnProperty(i)) continue; animations.push({ type: 'clear', square: i, piece: pos1[i], }); delete pos1[i]; } return animations; } // execute an array of animations async _doAnimations(animations, oldPos, newPos) { if (animations.length === 0) { return; } let numFinished = 0; const transitionEndListener = () => { numFinished++; if (numFinished === animations.length) { this.shadowRoot.removeEventListener('transitionend', transitionEndListener); this._animations.clear(); this.requestUpdate(); this.dispatchEvent(new CustomEvent('move-end', { bubbles: true, detail: { oldPosition: deepCopy(oldPos), newPosition: deepCopy(newPos), }, })); } }; this.shadowRoot.addEventListener('transitionend', transitionEndListener); // Render once with added pieces at opacity 0 this._animations.clear(); for (const animation of animations) { if (animation.type === 'add' || animation.type === 'add-start') { this._animations.set(animation.square, { ...animation, type: 'add-start', }); } else if (animation.type === 'move' || animation.type === 'move-start') { this._animations.set(animation.destination, { ...animation, type: 'move-start', }); } else { this._animations.set(animation.square, animation); } } // Wait for a paint this.requestUpdate(); await new Promise((resolve) => setTimeout(resolve, 0)); // Render again with the piece at opacity 1 with a transition this._animations.clear(); for (const animation of animations) { if (animation.type === 'move' || animation.type === 'move-start') { this._animations.set(animation.destination, animation); } else { this._animations.set(animation.square, animation); } } this.requestUpdate(); } // ------------------------------------------------------------------------- // Validation / Errors // ------------------------------------------------------------------------- _error(code, msg, _obj) { const errorText = `Chessboard Error ${code} : ${msg}`; this.dispatchEvent(new ErrorEvent('error', { message: errorText, })); return new Error(errorText); } }",
          "description": "A custom element that renders an interactive chess board."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "renderWikipediaSVGPiece",
          "declaration": {
            "name": "renderPiece",
            "module": "./utils"
          }
        },
        {
          "kind": "js",
          "name": "ChessBoardElement",
          "declaration": {
            "name": "ChessBoardElement",
            "module": "dist/chessboard-element.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/chessboard.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "ChessBoard",
          "default": "class ChessBoard extends LitElement { constructor() { super(...arguments); /** * Whether to show the board notation. * @default false */ this.hideNotation = false; /** * Adjust the board size based on available height. * @default false */ this.adjustByHeight = false; /** * A list on angled arrow overlays to draw on the board. */ this.angledArrows = []; /** * Animation speed for when pieces appear on a square. * * Note that the \"appear\" animation only occurs when `sparePieces` is `false`. * @default 'fast' */ this.appearSpeed = DEFAULT_APPEAR_SPEED; /** * List of board squares that contain a piece that are available to the user. List can be continuous or delimited. * Only pieces on this list can be interacted with and they will have the 'grab' cursor icon when hovered. * * Null means any piece on the board can be moved. * @default null */ this.availableBoardPieces = null; /** * List of spare pieces that are available to the user. List can be continuous or delimited. * Only the spare pieces on this list can be interacted with and dragged to the board. * * Null means that all spare pieces are available. * @default null */ this.availableSparePieces = null; /** * Name of the black player. */ this.blackName = null; /** * Rating of the black player. */ this.blackRating = null; /** * Time left for black player in seconds. This will be formatted in separate minutes, seconds and second fractions * for time display. For freely formatted time display, use the `blackTime` property instead. */ this.blackSeconds = null; /** * Time left for black player as a formatted string. Ignored if `blackSeconds` is set. */ this.blackTime = null; /** * Title of the black player. */ this.blackTitle = null; /** * Square codes with associated color masks to add to them. */ this.colorSquares = []; /** * If `true`, the time remaining for the player in turn will count down. * @default false */ this.countdown = false; this.countdownTimeout = 0; /** * If `true`, pieces on the board are draggable to other squares. * @default false */ this.draggablePieces = false; /** * If `'snapback'`, pieces dropped off the board will return to their original square. If `'trash'`, pieces dropped * off the board will be removed from the board. * * This property has no effect when `draggable` is `false`. * @default 'snapback' */ this.dropOffBoard = 'snapback'; /** * Animation speed for when pieces move between squares or from spare pieces to the board. * @default 'fast' */ this.moveSpeed = DEFAULT_MOVE_SPEED; /** * The orientation of the board. `'white'` for the white player at the bottom, `'black'` for the black player at * the bottom. * @default 'white' */ this.orientation = 'white'; /** * A function that renders DOM for a piece to a container element. This function can render any elements and text, * including SVG. * * The default value renders an SVG image of the piece, unless the `pieceTheme` property is set, then it uses * `pieceTheme` to get the URL for an `<img>` element. * * @default Function */ this.renderPiece = (piece, container) => { let pieceImage = undefined; if (isString(this.pieceTheme)) { pieceImage = interpolateTemplate(this.pieceTheme, { piece: piece }); } else if (isFunction(this.pieceTheme)) { pieceImage = this.pieceTheme(piece); } if (pieceImage === undefined) { renderWikipediaSVGPiece(piece, container); } else { render(html `<img class=\"piece-image\" src=${pieceImage} />`, container); } }; /** * Animation speed for when pieces that were dropped outside the board return to their original square. * @default 'veryfast' */ this.snapbackSpeed = DEFAULT_SNAPBACK_SPEED; /** * Animation speed for when pieces \\\"snap\\\" to a square when dropped. * @default 'snap' */ this.snapSpeed = DEFAULT_SNAP_SPEED; /** * If `true`, the board will have spare pieces that can be dropped onto the board. If `sparePieces` is set to * `true`, `draggablePieces` gets set to `true` as well. * @default false */ this.sparePieces = false; /** * List of markers to overlay on the given squares. */ this.squareMarkers = []; /** * A list of straight arrows to draw on the board. */ this.straightArrows = []; /** * If `true`, more pieces of a kind can be added to the board than is allowed by the rules. * @default false */ this.superfluousPieces = false; /** * Animation speed for when pieces are removed. * @default 'veryfast' */ this.trashSpeed = DEFAULT_TRASH_SPEED; /** * The player in turn. This only affects the appearance of player details and possible time countdown. * Either `black` or `white`. */ this.turn = null; /** * Name of the white player. */ this.whiteName = null; /** * Rating of the white player. */ this.whiteRating = null; /** * Time left for white player in seconds. This will be formatted in separate minutes, seconds and second fractions * for time display. For freely formatted time display, use the `whiteTime` property instead. */ this.whiteSeconds = null; /** * Time left for white player as a formatted string. Ignored if `whiteSeconds` is set. */ this.whiteTime = null; /** * Title of the white player. */ this.whiteTitle = null; this.#highlightSquares = new Map(); this.#animations = new Map(); this.#currentPosition = {}; } static { this.styles = styles; } /** * The current position as a FEN string. */ get fen() { return objToFen(this.#currentPosition); } /** * The current position of the board, as a `PositionObject`. This property may be set externally, but only to valid * `PositionObject`s. The value is copied before being applied to the board. Changes to the position object are not * reflected in th rendering. * * To set the position using FEN, or a keyword like `'start'`, or to use animations, use the `setPosition` method. */ get position() { return this.#currentPosition; } set position(value) { const oldValue = this.#currentPosition; this.#setCurrentPosition(value); this.requestUpdate('position', oldValue); } /** * Whether to show the board notation. This is always the inverse of `hideNotation`, which reflects the * `hide-notation` attribute. */ get showNotation() { return !this.hideNotation; } set showNotation(value) { this.hideNotation = !value; } #highlightSquares; #animations; #currentPosition; #dragState; /** * Is the current drag state \"dragging\". */ get #isDragging() { return this.#dragState?.state === 'dragging'; } /** * Get the edge length of a single square in pixels. */ get #squareSize() { // Note: this isn't cached, but is called during user interactions, so we // have a bit of time to use under RAIL guidelines. if (this.adjustByHeight && this.parentElement?.style.height) { const hasExtraRows = this.sparePieces || this.blackName || this.whiteName; return this.parentElement.offsetHeight / (hasExtraRows ? 10 : 8); } else { return this.offsetWidth / 8; } } /** * Build a list of CSS parts from the given part names. * @param parts - List of part names (empty strings are omitted). * @returns A CSS part string. */ #concatParts(...parts) { const nonEmpty = parts.filter(c => c.length > 0); return nonEmpty.join(' '); } /** * Get the HTML element of the given `square`. * @param square - Square code. * @returns HTML element. */ #getSquareElement(square) { return this.shadowRoot.getElementById(squareId(square)); } /** * Get the HTML element for the give spare `piece`. * @param piece - Piece code. * @returns HTML element. */ #getSparePieceElement(piece) { return this.shadowRoot.getElementById(sparePieceId(piece)); } // ------------------------------------------------------------------------- // DOM Building // ------------------------------------------------------------------------- render() { const detailStyles = { height: `${!this.sparePieces && (this.blackName || this.whiteName) ? this.#squareSize : 0}px`, width: `${!this.sparePieces && (this.blackName || this.whiteName) ? 8 * this.#squareSize : 0}px`, // Set base font size to adjust label sizes according to board size. fontSize: `${this.#squareSize}px` }; const spareStyles = { height: `${this.sparePieces ? this.#squareSize : 0}px`, width: `${this.sparePieces ? 8 * this.#squareSize : 0}px`, }; return html ` <div part=\"wrapper\"> <div part=\"spare-pieces\" style=\"${styleMap(spareStyles)}\"> ${this.#renderSparePieces(this.orientation === 'white' ? 'black' : 'white')} </div> <div part=\"game-details\" style=\"${styleMap(detailStyles)}\"> ${this.#renderGameDetails(this.orientation === 'white' ? 'black' : 'white')} </div> ${this.#renderBoard()} <div part=\"game-details\" style=\"${styleMap(detailStyles)}\"> ${this.#renderGameDetails(this.orientation === 'white' ? 'white' : 'black')} </div> <div part=\"spare-pieces\" style=\"${styleMap(spareStyles)}\"> ${this.#renderSparePieces(this.orientation === 'white' ? 'white' : 'black')} </div> <div id=\"dragged-pieces\" part=\"dragged-pieces\" style=${styleMap({ width: `0px`, height: `0px`, cursor: `grabbing`, overflow: `visible`, })} > ${this.#renderDraggedPiece()} </div> </div> `; } /** * Render player details if they are available. * @param color - Color of the player. */ #renderGameDetails(color) { // Spare pieces overrides player details. if (this.sparePieces) { return nothing; } if (!this.blackName && !this.whiteName) { return nothing; } // Only display the timer component if there is something to display. const timerStyles = { display: ((color === 'black' && (this.blackSeconds !== null || this.blackTime !== null)) || (color === 'white' && (this.whiteSeconds !== null || this.whiteTime !== null))) ? 'flex' : 'none' }; const isLowTime = (color === 'black' && this.blackSeconds !== null && this.blackSeconds < LOW_TIME) || (color === 'white' && this.whiteSeconds !== null && this.whiteSeconds < LOW_TIME); const playerTime = color === 'black' ? (this.blackSeconds || 0) : (this.whiteSeconds || 0); const isOutOfTime = playerTime === 0; // Only display the second fraction if total time remaining is below threshold. const fractionStyles = { display: isLowTime && !isOutOfTime ? 'block' : 'none' }; const playerName = (color === 'black' ? this.blackName : this.whiteName) || 'Unknown'; const playerTitle = (color === 'black' ? this.blackTitle : this.whiteTitle) || ''; // Display something below the name for consistent visuals, either title or rating. const playerRating = (color === 'black' ? this.blackRating : this.whiteRating) || (playerTitle ? '' : 'Unrated'); const timeMinutes = Math.floor(playerTime / 60); const timeSeconds = Math.floor(playerTime % 60).toString().padStart(2, '0'); const timeFraction = playerTime.toFixed(1).split('.')[1]; // Start possible countdown for the color in turn. if (this.countdown && this.turn === color && playerTime && !this.countdownTimeout) { // Take note of the time of the next exat seconds to keep the clock in sync. const startTime = Date.now(); // Add 50 ms to make sure that the displayed second always changes. const secOffset = (playerTime * 1000) % 1000 + 50; let timeCountedDown = secOffset; const updateTime = (delta) => { const timeRemaining = color === 'black' ? (this.blackSeconds || 0) : (this.whiteSeconds || 0); if (color = 'black') { this.blackSeconds -= delta / 1000; if (this.blackSeconds <= 0) { // Don't go into negative numbers... this.blackSeconds = 0; return; } } else { this.whiteSeconds -= delta / 1000; if (this.whiteSeconds <= 0) { this.whiteSeconds = 0; return; } } const timeSync = Date.now() - startTime - timeCountedDown; // Start faster update interval the seconds before we reach low time range. const tickTarget = timeRemaining > LOW_TIME + 1 ? 100 : 50; const nexTick = tickTarget - timeSync; this.countdownTimeout = setTimeout(() => updateTime(nexTick), nexTick); timeCountedDown += tickTarget + timeSync; }; if (this.countdownTimeout) { clearTimeout(this.countdownTimeout); } // Countdown the remaining fraction first. this.countdownTimeout = setTimeout(() => updateTime(secOffset), secOffset); } return html ` <div part=\"${this.#concatParts('player-details', 'player-${color}', color === this.turn ? 'player-turn' : '')}\"> <div part=\"player-name\"> ${playerName} </div> <div part=\"player-rating\"> ${playerTitle}${playerTitle && playerRating ? ', ' : ''} ${playerRating} </div> </div> <div part=\"${this.#concatParts('player-timer', 'timer-${color}', isOutOfTime ? 'timer-low' : '')}\" style=\"${styleMap(timerStyles)}\" > <div part=\"timer-minutes\"> ${timeMinutes} </div> : <div part=\"${this.#concatParts('timer-seconds', isLowTime && !isOutOfTime ? 'timer-low' : '')}\"> ${timeSeconds} </div> <div part=\"timer-fraction timer-low\" style=\"${styleMap(fractionStyles)}\"> .${timeFraction} </div> </div> `; } /** * Render spare pieces of the given `color`. Pieces are rendered on an additional row instead of the player details. * @param color - Color of the side with the spare pieces. */ #renderSparePieces(color) { if (!this.sparePieces) { return nothing; } const pieces = color === 'black' ? blackPieces : whitePieces; const totalPieces = Object.values(this.position).filter(bp => (color === 'black' ? bp?.startsWith('b') : bp?.startsWith('w'))).length; const pawnCount = Object.values(this.position).filter(bp => bp === (color === 'black' ? 'bP' : 'wP')).length; // The empty <div>s below are placeholders to get the shelf to line up with the board's grid. Another option // would be to try to use the same grid, either with a single container, or subgrid/display:contents when those // are available. return html ` <div></div> ${pieces.map((p) => { const availPieces = 16 - totalPieces; const pieceCount = Object.values(this.position).filter(bp => bp === p).length; /** Number of pawns missing from the board = possible promotions. */ const promoCount = 8 - pawnCount; const availableForKind = p.endsWith('B') ? Math.min((2 + promoCount) - pieceCount, availPieces) : p.endsWith('K') ? Math.min(1 - pieceCount, availPieces) : p.endsWith('N') ? Math.min((2 + promoCount) - pieceCount, availPieces) : p.endsWith('P') ? Math.min(8 - pieceCount, availPieces) : p.endsWith('Q') ? Math.min((1 + promoCount) - pieceCount, availPieces) : p.endsWith('R') ? Math.min((2 + promoCount) - pieceCount, availPieces) : 0; const disabled = (availableForKind < 1 || this.superfluousPieces) || (this.availableSparePieces !== null && !this.availableSparePieces.toLowerCase().includes(p.toLowerCase())); return html ` <div id=\"spare-${p}\" part=\"${this.#concatParts('spare-piece', disabled ? 'disabled' : '')}\" @mousedown=${disabled ? null : this.#pointerdownSparePiece} @touchstart=${disabled ? null : this.#pointerdownSparePiece} > ${this.#renderPiece(p, {}, false, sparePieceId(p))} </div> `; })} <div></div> `; } /** * Render the piece that is being dragged. */ #renderDraggedPiece() { const styles = { height: `${this.#squareSize}px`, width: `${this.#squareSize}px`, }; const dragState = this.#dragState; if (dragState !== undefined) { styles.display = 'block'; const rect = this.getBoundingClientRect(); if (dragState.state === 'dragging') { const { x, y } = dragState; Object.assign(styles, { top: `${y - rect.top - this.#squareSize / 2}px`, left: `${x - rect.left - this.#squareSize / 2}px`, }); } else if (dragState.state === 'snapback') { const { source } = dragState; const square = this.#getSquareElement(source); const squareRect = square.getBoundingClientRect(); Object.assign(styles, { transitionProperty: 'top, left', transitionDuration: `${speedToMS(this.snapbackSpeed)}ms`, top: `${squareRect.top - rect.top}px`, left: `${squareRect.left - rect.left}px`, }); } else if (dragState.state === 'trash') { const { x, y } = dragState; Object.assign(styles, { transitionProperty: 'opacity', transitionDuration: `${speedToMS(this.trashSpeed)}ms`, opacity: '0', top: `${y - rect.top - this.#squareSize / 2}px`, left: `${x - rect.left - this.#squareSize / 2}px`, }); } else if (dragState.state === 'snap') { const square = this.#getSquareElement(dragState.location); const squareRect = square.getBoundingClientRect(); Object.assign(styles, { transitionProperty: 'top, left', transitionDuration: `${speedToMS(this.snapSpeed)}ms`, top: `${squareRect.top - rect.top}px`, left: `${squareRect.left - rect.left}px`, }); } } return this.#renderPiece(this.#dragState?.piece ?? '', styles, false, undefined, 'dragged-piece'); } /** * Render the chess board and pieces on the board. */ #renderBoard() { const squares = []; const isFlipped = this.orientation === 'black'; for (let row = 0; row < 8; row++) { for (let col = 0; col < 8; col++) { const file = COLUMNS[isFlipped ? 7 - col : col]; const rank = isFlipped ? row + 1 : 8 - row; const square = `${file}${rank}`; const squareColor = getSquareColor(square); let piece = this.#currentPosition[square]; const isDragSource = square === this.#dragState?.source; const animation = this.#animations.get(square); const highlightStyle = this.#highlightSquares.get(square); const squareHighlight = isDragSource ? 'highlight-active' : highlightStyle ? `highlight-${highlightStyle}` : ''; const colorSquare = this.colorSquares?.filter(s => s.square === square)[0]; const squareStyles = colorSquare ? { boxShadow: `inset 0 0 ${this.#squareSize}px 0 ${colorSquare.color}` } : {}; const draggable = piece && (this.availableBoardPieces === null || this.availableBoardPieces?.toLowerCase().includes(square)) ? 'draggable' : ''; const pieceStyles = this.#getAnimationStyles(piece, animation); if (!piece && animation?.type === 'clear') { // Preserve the piece until the animation is complete piece = animation.piece; } squares.push(html ` <div id=${squareId(square)} data-square=${square} part=\"${this.#concatParts('square', square, squareColor, squareHighlight, colorSquare ? 'colored' : '', draggable)}\" style=\"${styleMap(squareStyles)}\" @mousedown=${this.#pointerdownSquare} @mouseenter=${this.#pointerenterSquare} @mouseleave=${this.#pointerleaveSquare} @touchstart=${this.#pointerdownSquare} > ${this.showNotation && row === 7 ? html `<div part=\"notation alpha\">${file}</div>` : nothing} ${this.showNotation && col === 0 ? html `<div part=\"notation numeric\">${rank}</div>` : nothing} ${this.#renderPiece(piece, pieceStyles, isDragSource)} </div> `); } } // Main board dimensions. const styles = { width: this.#squareSize * 8 + 'px', height: this.#squareSize * 8 + 'px', }; // Add overlays. const arrows = []; for (const arr of this.angledArrows || []) { arrows.push(arr.getSvg()); } for (const arr of this.straightArrows || []) { arrows.push(arr.getSvg()); } const markers = []; for (const mrk of this.squareMarkers || []) { markers.push(mrk.getSvg()); } return html `<div part=\"board\" style=${styleMap(styles)}>${squares}${arrows}${markers}</div>`; } /** * Render the the given piece on the board. * @param piece - The piece to render. * @param styles - Additional piece styles. * @param isDragSource - Is this piece currently being dragged. * @param id - Optional piece ID. * @param part - Additional CSS parts. */ #renderPiece(piece, styles, isDragSource, id, part) { if (piece === undefined || piece === '') { return nothing; } // Required and additional styles. const style = { opacity: '1', transitionProperty: '', transitionDuration: '0ms', ...styles, }; // Do not display a piece that is being dragged on the source square. if (isDragSource) { style.display = 'none'; } if (!isFunction(this.renderPiece)) { this.#error(8272, 'invalid renderPiece.'); } return html ` <div id=${ifDefined(id)} part=\"piece ${part ?? ''}\" piece=${piece} style=${styleMap(style)} ...=${renderPieceDirective(piece, this.renderPiece)} ></div> `; } /** * Get possible `animation` styles for the given `piece`. * @param piece - The chess piece. * @param animation - Possible animation. * @returns Animation styles as an object. */ #getAnimationStyles(piece, animation) { if (animation) { if (piece && (animation.type === 'move-start' || (animation.type === 'add-start' && this.draggablePieces))) { // BoardPosition the moved piece absolutely at the source. const srcSquare = animation.type === 'move-start' ? this.#getSquareElement(animation.source) : this.#getSparePieceElement(piece); const destSquare = animation.type === 'move-start' ? this.#getSquareElement(animation.destination) : this.#getSquareElement(animation.square); const srcSquareRect = srcSquare.getBoundingClientRect(); const destSquareRect = destSquare.getBoundingClientRect(); return { position: 'absolute', left: `${srcSquareRect.left - destSquareRect.left}px`, top: `${srcSquareRect.top - destSquareRect.top}px`, width: `${this.#squareSize}px`, height: `${this.#squareSize}px`, }; } if (piece && (animation.type === 'move' || (animation.type === 'add' && this.draggablePieces))) { // Transition the moved piece to the destination. return { position: 'absolute', transitionProperty: 'top, left', transitionDuration: `${speedToMS(this.moveSpeed)}ms`, top: `0`, left: `0`, width: `${this.#squareSize}px`, height: `${this.#squareSize}px`, }; } if (!piece && animation.type === 'clear') { // Preserve and transition a removed piece to opacity 0. piece = animation.piece; return { transitionProperty: 'opacity', transitionDuration: `${speedToMS(this.trashSpeed)}ms`, opacity: '0', }; } if (piece && animation.type === 'add-start') { // Initialize an added piece to opacity 0. return { opacity: '0', }; } if (piece && animation.type === 'add') { // Transition an added piece to opacity 1. return { transitionProperty: 'opacity', transitionDuration: `${speedToMS(this.appearSpeed)}ms`, }; } } return {}; } // ------------------------------------------------------------------------- // Event Listeners // ------------------------------------------------------------------------- #pointerdownSquare(e) { // Do nothing if we're not draggable. sparePieces implies draggable. if (!this.draggablePieces && !this.sparePieces) { return; } // Do nothing if there is no piece on this square. const squareEl = e.currentTarget; const square = squareEl.getAttribute('data-square'); if (square === null || !this.#currentPosition.hasOwnProperty(square)) { return; } // Ignore squares that don't have a movable piece. if (this.availableBoardPieces !== null && !this.availableBoardPieces.includes(square)) { return; } e.preventDefault(); const pos = e instanceof MouseEvent ? e : e.changedTouches[0]; this.#startDraggingPiece(square, this.#currentPosition[square], pos.clientX, pos.clientY); } #pointerdownSparePiece(e) { // Do nothing if sparePieces is not enabled. if (!this.sparePieces) { return; } const sparePieceContainerEl = e.currentTarget; const pieceEl = sparePieceContainerEl.querySelector('[part~=piece]'); const piece = pieceEl.getAttribute('piece'); e.preventDefault(); const pos = e instanceof MouseEvent ? e : e.changedTouches[0]; this.#startDraggingPiece('spare', piece, pos.clientX, pos.clientY); } #pointerenterSquare(e) { // Do not fire this event if we are dragging a piece. // NOTE: this should never happen, but it's a safeguard. if (this.#dragState !== undefined) { return; } const square = e.currentTarget.getAttribute('data-square'); // NOTE: this should never happen; defensive. if (!isValidSquare(square)) { return; } const piece = this.#currentPosition.hasOwnProperty(square) && this.#currentPosition[square]; // Dispatch custom event. this.dispatchEvent(new CustomEvent('mouseover-square', { bubbles: true, detail: { square, piece, position: deepCopy(this.#currentPosition), orientation: this.orientation, }, })); } #pointerleaveSquare(e) { // Do not fire this event if we are dragging a piece. // NOTE: this should never happen, but it's a safeguard. if (this.#dragState !== undefined) { return; } const square = e.currentTarget.getAttribute('data-square'); // NOTE: this should never happen; defensive. if (!isValidSquare(square)) { return; } const piece = this.#currentPosition.hasOwnProperty(square) && this.#currentPosition[square]; // Dispatch custom event. this.dispatchEvent(new CustomEvent('mouseout-square', { bubbles: true, detail: { square, piece, position: deepCopy(this.#currentPosition), orientation: this.orientation, }, })); } #pointermoveWindow(e) { // Do nothing if we are not dragging a piece. if (!this.#isDragging) { return; } // Prevent screen from scrolling. e.preventDefault(); const pos = e instanceof MouseEvent ? e : e.changedTouches[0]; this.#updateDraggedPiece(pos.clientX, pos.clientY); } #pointerupWindow(e) { // Do nothing if we are not dragging a piece. if (!this.#isDragging) { return; } const pos = e instanceof MouseEvent ? e : e.changedTouches[0]; const location = this.#isXYOnSquare(pos.clientX, pos.clientY); this.#stopDraggingPiece(location); } // ------------------------------------------------------------------------- // Internal methods. // ------------------------------------------------------------------------- /** * Calculate an array of animations that need to happen in order to get from `pos1` to `pos2`. * @param pos1 - First (starting) board position. * @param pos2 - Second (ending) board position. * @returns Array of possible animations. */ #calculateAnimations(pos1, pos2) { // Make copies of both. pos1 = deepCopy(pos1); pos2 = deepCopy(pos2); // Always return an array. const animations = []; const squaresMovedTo = {}; // Ignore pieces that are the same in both positions. for (const i in pos2) { if (!pos2.hasOwnProperty(i)) { continue; } if (pos1.hasOwnProperty(i) && pos1[i] === pos2[i]) { delete pos1[i]; delete pos2[i]; } } // Find all the \"move\" animations. for (const i in pos2) { if (!pos2.hasOwnProperty(i)) { continue; } const closestPiece = findClosestPiece(pos1, pos2[i], i); if (closestPiece) { animations.push({ type: 'move', source: closestPiece, destination: i, piece: pos2[i], }); // Remove the processed pieces. delete pos1[closestPiece]; delete pos2[i]; squaresMovedTo[i] = true; } } // '\"add\" animations for new pieces on the board. for (const i in pos2) { if (!pos2.hasOwnProperty(i)) { continue; } animations.push({ type: 'add', square: i, piece: pos2[i], }); delete pos2[i]; } // \"clear\" animations for pieces removed from the board. for (const i in pos1) { if (!pos1.hasOwnProperty(i)) { continue; } // Do not clear a piece if it is on a square that is the result of a \"move\", ie: a piece capture. if (squaresMovedTo.hasOwnProperty(i)) { continue; } animations.push({ type: 'clear', square: i, piece: pos1[i], }); delete pos1[i]; } return animations; } /** * Perform the given `animations` to change the state of the board. * @param animations - Array of animations to perform. * @param oldPos - The starting board position. * @param newPos - The resulting board position. */ async #doAnimations(animations, oldPos, newPos) { if (!animations.length) { return; } let numFinished = 0; const transitionEndListener = () => { numFinished++; if (numFinished === animations.length) { this.shadowRoot.removeEventListener('transitionend', transitionEndListener); this.#animations.clear(); this.requestUpdate(); this.dispatchEvent(new CustomEvent('move-end', { bubbles: true, detail: { oldPosition: deepCopy(oldPos), newPosition: deepCopy(newPos), }, })); } }; this.shadowRoot.addEventListener('transitionend', transitionEndListener); // Render once with added pieces at opacity 0 to \"fade the pieces in\". this.#animations.clear(); for (const animation of animations) { if (animation.type === 'add' || animation.type === 'add-start') { this.#animations.set(animation.square, { ...animation, type: 'add-start', }); } else if (animation.type === 'move' || animation.type === 'move-start') { this.#animations.set(animation.destination, { ...animation, type: 'move-start', }); } else { this.#animations.set(animation.square, animation); } } // Wait for a paint. this.requestUpdate(); await new Promise((resolve) => setTimeout(resolve, 0)); // Render again with the piece at opacity 1 with a transition. this.#animations.clear(); for (const animation of animations) { if (animation.type === 'move' || animation.type === 'move-start') { this.#animations.set(animation.destination, animation); } else { this.#animations.set(animation.square, animation); } } this.requestUpdate(); } /** * Place the currently dragged piece on the given `square`. * @param square - The target square name. * @returns A promise that resolves when the action is complete. */ async #dropDraggedPieceOnSquare(square) { isDragging(this.#dragState); const { source, piece } = this.#dragState; // Update position. const newPosition = deepCopy(this.#currentPosition); delete newPosition[source]; newPosition[square] = piece; this.#setCurrentPosition(newPosition); // Set initial state. this.#dragState = { state: 'snap', piece, location: square, source: square, }; // Wait for a paint. this.requestUpdate(); await new Promise((resolve) => setTimeout(resolve, 0)); // Promise that resolves when the piece has reached its position on the square. return new Promise((resolve) => { const transitionComplete = () => { this._draggedPieceElement.removeEventListener('transitionend', transitionComplete); resolve(); // Fire the snap-end event. this.dispatchEvent(new CustomEvent('snap-end', { bubbles: true, detail: { source, square, piece, }, })); }; this._draggedPieceElement.addEventListener('transitionend', transitionComplete); }); } /** * Create and dispatch a new error. * @param code - Error code. * @param msg - Error message. * @param _obj - Possible error object? * @returns The created error. */ #error(code, msg, _obj) { const errorText = `Chessboard Error ${code} : ${msg}`; this.dispatchEvent(new ErrorEvent('error', { message: errorText, })); return new Error(errorText); } /** * Highlight the given square. * @param square - Square name. * @param value - Optional highlight style. */ #highlightSquare(square, value = null) { if (value) { this.#highlightSquares.set(square, value); } else { this.#highlightSquares.delete(square); } this.requestUpdate('_highlightSquares'); } /** * Check which square (or off the board) the given window x,y position is. * @param x - Pointer x-position. * @param y - Pointer y-position. * @returns Square name 'offboard'. */ #isXYOnSquare(x, y) { // TODO: remove cast when TypeScript fixes ShadowRoot.elementsFromPoint const elements = this .shadowRoot.elementsFromPoint(x, y); const squareEl = elements.find((e) => e.part.contains('square')); const square = squareEl === undefined ? 'offboard' : squareEl.getAttribute('data-square'); return square; } /** * Set the board to the given board `position`. * @param position - The position to set. * @param playerMove - Is this position change a move made by a player (default true). */ #setCurrentPosition(position, playerMove = true) { const oldPos = deepCopy(this.#currentPosition); const newPos = deepCopy(position); const oldFen = objToFen(oldPos); const newFen = objToFen(newPos); // Do nothing if no change in position. if (oldFen === newFen) { return; } // Update board state. this.#currentPosition = position; // Fire change event, wait for animation time if this is a programmatic change. setTimeout(() => { this.dispatchEvent(new CustomEvent('change', { bubbles: true, detail: { oldFen: oldFen || '', oldPosition: oldPos, newFen: newFen || '', newPosition: newPos, }, })); }, playerMove ? 0 : speedToMS(this.moveSpeed)); } /** * Perform a 'snapback' action for the given piece, or trash it if it is a spare piece. * @returns A promise that resolves when the action is complete. */ async #snapbackDraggedPiece() { isDragging(this.#dragState); const { source, piece } = this.#dragState; // There is no \"snapback\" for spare pieces. if (source === 'spare') { return this.#trashDraggedPiece(); } // Set initial state. this.#dragState = { state: 'snapback', piece, source, }; // Wait for a paint. this.requestUpdate(); await new Promise((resolve) => setTimeout(resolve, 0)); // Promise that resolves when the snapback is complete. return new Promise((resolve) => { const transitionComplete = () => { this._draggedPieceElement.removeEventListener('transitionend', transitionComplete); resolve(); this.dispatchEvent(new CustomEvent('snapback-end', { bubbles: true, detail: { piece, square: source, position: deepCopy(this.#currentPosition), orientation: this.orientation, }, })); }; this._draggedPieceElement.addEventListener('transitionend', transitionComplete); }); } /** * Start dragging a chess `piece`. * @param source - Source square of the dragged piece. * @param piece - The dragged chess piece. * @param x - Window x-position of the pointer at start of the drag operation. * @param y - Window y-position of the pointer at start of the drag operation. */ #startDraggingPiece(source, piece, x, y) { // Fire cancalable drag-start event. const event = new CustomEvent('drag-start', { bubbles: true, cancelable: true, detail: { source, piece, position: deepCopy(this.#currentPosition), orientation: this.orientation, }, }); // Dispatch the drag-start event. this.dispatchEvent(event); if (event.defaultPrevented) { return; } // Set initial state. this.#dragState = { state: 'dragging', x, y, piece, // If the piece came from spare pieces, location is offboard. location: source === 'spare' ? 'offboard' : source, source, }; this.requestUpdate(); } /** * Stop the piece drag operation. * @param location - Board position where the operation stopped. */ async #stopDraggingPiece(location) { isDragging(this.#dragState); const { source, piece } = this.#dragState; // Determine what the action should be. let action = 'drop'; if (location === 'offboard') { action = this.dropOffBoard === 'trash' ? 'trash' : 'snapback'; } const newPosition = deepCopy(this.#currentPosition); const oldPosition = deepCopy(this.#currentPosition); // Ssee if a spare piece was placed on the board. if (source === 'spare' && isValidSquare(location)) { newPosition[location] = piece; } // See if source piece was on the board. if (isValidSquare(source)) { // Remove the piece from the board. delete newPosition[source]; // New position is on the board. if (isValidSquare(location)) { newPosition[location] = piece; } } // Dispatch the drop event. // Allow listeners to change the drop action using the `setAction` method.. const dropEvent = new CustomEvent('drop', { bubbles: true, detail: { source, target: location, piece, newPosition, oldPosition, orientation: this.orientation, setAction(a) { action = a; }, }, }); this.dispatchEvent(dropEvent); // Remove square highlight hints from the board. this.#highlightSquares.clear(); // Check if action was changed and perform it. if (action === 'snapback') { await this.#snapbackDraggedPiece(); } else if (action === 'trash') { await this.#trashDraggedPiece(); } else if (action === 'drop') { await this.#dropDraggedPieceOnSquare(location); } // Clear dragging state. this.#dragState = undefined; // Render the final post-dragging board state. this.requestUpdate(); } /** * Trash (remove) the currently dragged piece. * @returns A promise that resolves when the action is complete. */ async #trashDraggedPiece() { isDragging(this.#dragState); const { source, piece } = this.#dragState; // Remove the source piece. const newPosition = deepCopy(this.#currentPosition); delete newPosition[source]; this.#setCurrentPosition(newPosition); // Set initial state. this.#dragState = { state: 'trash', piece, x: this.#dragState.x, y: this.#dragState.y, source: this.#dragState.source, }; // Wait for a paint. this.requestUpdate(); await new Promise((resolve) => setTimeout(resolve, 0)); // Promise that resolves when the piece has been trashed. return new Promise((resolve) => { const transitionComplete = () => { this._draggedPieceElement.removeEventListener('transitionend', transitionComplete); resolve(); }; this._draggedPieceElement.addEventListener('transitionend', transitionComplete); }); } /** * Update the position of a piece being dragged. * @param x - Current window x-position of the pointer. * @param y - Current window y-position of the pointer. */ #updateDraggedPiece(x, y) { isDragging(this.#dragState); // Put the dragged piece over the mouse cursor. this.#dragState.x = x; this.#dragState.y = y; this.requestUpdate(); // Check the current lcoation of the pointer. const location = this.#isXYOnSquare(x, y); // Do nothing more if the location has not changed. if (location === this.#dragState.location) { return; } // Remove highlight from previous square. if (isValidSquare(this.#dragState.location)) { this.#highlightSquare(this.#dragState.location, null); } // Add highlight to new square. if (isValidSquare(location)) { this.#highlightSquare(location, 'active'); } // Dispatch the drag-move event. this.dispatchEvent(new CustomEvent('drag-move', { bubbles: true, detail: { newLocation: location, oldLocation: this.#dragState.location, source: this.#dragState.source, piece: this.#dragState.piece, position: deepCopy(this.#currentPosition), orientation: this.orientation, }, })); // Update drag state. this.#dragState.location = location; } // ------------------------------------------------------------------------- // Public Methods // ------------------------------------------------------------------------- /** * Sets the position of the board. * @param useAnimation If `true`, animate to the new position. If `false`, show the new position instantly. */ setPosition(position, useAnimation = true) { position = normalizePosition(position); // Validate position object. if (!isValidPositionObject(position)) { throw this.#error(6482, 'Invalid value passed to the position method.', position); } if (useAnimation) { // Start the animations. const animations = this.#calculateAnimations(this.#currentPosition, position); this.#doAnimations(animations, this.#currentPosition, position); } this.#setCurrentPosition(position); this.requestUpdate(); } /** * Sets the board to the start position. * @param useAnimation If `true`, animate to the new position. If `false`, show the new position instantly. */ start(useAnimation) { this.setPosition('start', useAnimation); } /** * Removes all the pieces on the board. If `useAnimation` is `false`, removes * pieces instantly. * * This is shorthand for `setPosition({})`. * * @param useAnimation If `true`, animate to the new position. If `false`, show the new position instantly. */ clear(useAnimation) { this.setPosition({}, useAnimation); } /** * Executes one or more moves on the board. * * Moves are strings the form of \"e2-e4\", \"f6-d5\", etc., Pass `false` as an argument to disable animation. */ move(...args) { let useAnimation = true; // Collect the moves into an object. const moves = {}; for (const arg of args) { // Any \"false\" to this function means no animations. if (arg === false) { useAnimation = false; continue; } // Skip invalid arguments. if (!isValidMove(arg)) { this.#error(2826, 'Invalid move passed to the move method.', arg); continue; } const [from, to] = arg.split('-'); moves[from] = to; } // Calculate position from moves. const newPos = calculatePositionFromMoves(this.#currentPosition, moves); // Update the board. this.setPosition(newPos, useAnimation); // Return the new position object. return newPos; } /** * Flip the orientation. */ flip() { this.orientation = this.orientation === 'white' ? 'black' : 'white'; } /** * Recalculates board and square sizes based on the parent element and redraws the board accordingly. */ resize() { this.requestUpdate(); } // ------------------------------------------------------------------------- // Lifecycle Callbacks // ------------------------------------------------------------------------- firstUpdated() { // We need to re-render to read the size of the container. this.requestUpdate(); if (window.ResizeObserver !== undefined) { new ResizeObserver(() => { this.resize(); }).observe(this); } } connectedCallback() { super.connectedCallback(); window.addEventListener('pointermove', this.#pointermoveWindow.bind(this)); window.addEventListener('pointerup', this.#pointerupWindow.bind(this)); window.addEventListener('touchmove', this.#pointermoveWindow.bind(this), { passive: false, }); window.addEventListener('touchend', this.#pointerupWindow.bind(this), { passive: false, }); } disconnectedCallback() { super.disconnectedCallback(); window.removeEventListener('pointermove', this.#pointermoveWindow.bind(this)); window.removeEventListener('pointerup', this.#pointerupWindow.bind(this)); window.removeEventListener('touchmove', this.#pointermoveWindow.bind(this)); window.removeEventListener('touchend', this.#pointerupWindow.bind(this)); } }",
          "description": "A custom element that renders an interactive chess board."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ChessBoard",
          "declaration": {
            "name": "ChessBoard",
            "module": "dist/chessboard.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/index.js",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "ChessBoard",
          "declaration": {
            "name": "ChessBoard",
            "module": "dist/index.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ChessBoard",
            "module": "dist/index.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/types.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "ChessboardEvents",
          "description": "Chessboard types."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ChessboardEvents",
          "declaration": {
            "name": "ChessboardEvents",
            "module": "dist/types.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/chessboard.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A custom element that renders an interactive chess board.",
          "name": "ChessBoard",
          "cssProperties": [
            {
              "description": "The background for white squares and text color for black squares.",
              "name": "--light-color",
              "default": "#f0d9b5"
            },
            {
              "description": "The background for black squares and text color for white squares.",
              "name": "--dark-color",
              "default": "#b58863"
            },
            {
              "description": "The highlight color.",
              "name": "--highlight-color",
              "default": "yellow"
            },
            {
              "description": "The highlight color for squares that are available.",
              "name": "--highlight-color-available",
              "default": "yellowgreen"
            },
            {
              "description": "The highlight color for squares that are unavailable.",
              "name": "--highlight-color-unavailable",
              "default": "gray"
            },
            {
              "description": "Blue preset color for overlays and colored squares.",
              "name": "--preset-color-blue: rgb(0, 110, 255)"
            },
            {
              "description": "Cyan preset color for overlays and colored squares.",
              "name": "--preset-color-cyan: rgb(0, 175, 225)"
            },
            {
              "description": "Green preset color for overlays and colored squares.",
              "name": "--preset-color-green: rgb(0, 200, 0)"
            },
            {
              "description": "Grey preset color for overlays and colored squares.",
              "name": "--preset-color-grey: rgb(127, 127, 127)"
            },
            {
              "description": "Orange preset color for overlays and colored squares.",
              "name": "--preset-color-orange: rgb(255, 127, 0)"
            },
            {
              "description": "Purple preset color for overlays and colored squares.",
              "name": "--preset-color-purple: rgb(200, 0, 100)"
            },
            {
              "description": "Red preset color for overlays and colored squares.",
              "name": "--preset-color-red: rgb(255, 0, 0)"
            },
            {
              "description": "Yellow preset color for overlays and colored squares.",
              "name": "--preset-color-yellow: rgb(225, 200, 0)"
            }
          ],
          "cssParts": [
            {
              "description": "The chess board.",
              "name": "board"
            },
            {
              "description": "A square on the board.",
              "name": "square"
            },
            {
              "description": "A chess piece.",
              "name": "piece"
            },
            {
              "description": "The spare piece container.",
              "name": "spare-pieces"
            },
            {
              "description": "Container with player details.",
              "name": "player-details"
            },
            {
              "description": "The currently dragged piece.",
              "name": "dragged-piece"
            },
            {
              "description": "A white square.",
              "name": "white"
            },
            {
              "description": "A black square.",
              "name": "black"
            },
            {
              "description": "A highlighted square.",
              "name": "highlight"
            },
            {
              "description": "An available square.",
              "name": "available"
            },
            {
              "description": "An unavailable square.",
              "name": "unavailable"
            },
            {
              "description": "A colored square.",
              "name": "colored"
            },
            {
              "description": "The square location labels.",
              "name": "notation"
            },
            {
              "description": "The alpha (column) labels.",
              "name": "alpha"
            },
            {
              "description": "The numeric (row) labels.",
              "name": "numeric"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "styles",
              "static": true,
              "default": "styles"
            },
            {
              "kind": "field",
              "name": "fen",
              "description": "The current position as a FEN string.",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "BoardPositionObject"
              },
              "description": "The current position of the board, as a `PositionObject`. This property may be set externally, but only to valid\n`PositionObject`s. The value is copied before being applied to the board. Changes to the position object are not\nreflected in th rendering.\n\nTo set the position using FEN, or a keyword like `'start'`, or to use animations, use the `setPosition` method."
            },
            {
              "kind": "field",
              "name": "hideNotation",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether to show the board notation."
            },
            {
              "kind": "field",
              "name": "showNotation",
              "description": "Whether to show the board notation. This is always the inverse of `hideNotation`, which reflects the\n`hide-notation` attribute."
            },
            {
              "kind": "field",
              "name": "adjustByHeight",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Adjust the board size based on available height."
            },
            {
              "kind": "field",
              "name": "angledArrows",
              "type": {
                "text": "StraightArrow[]"
              },
              "default": "[]",
              "description": "A list on angled arrow overlays to draw on the board."
            },
            {
              "kind": "field",
              "name": "appearSpeed",
              "type": {
                "text": "AnimationSpeed"
              },
              "default": "200",
              "description": "Animation speed for when pieces appear on a square.\n\nNote that the \"appear\" animation only occurs when `sparePieces` is `false`."
            },
            {
              "kind": "field",
              "name": "availableBoardPieces",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "description": "List of board squares that contain a piece that are available to the user. List can be continuous or delimited.\nOnly pieces on this list can be interacted with and they will have the 'grab' cursor icon when hovered.\n\nNull means any piece on the board can be moved."
            },
            {
              "kind": "field",
              "name": "availableSparePieces",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "description": "List of spare pieces that are available to the user. List can be continuous or delimited.\nOnly the spare pieces on this list can be interacted with and dragged to the board.\n\nNull means that all spare pieces are available."
            },
            {
              "kind": "field",
              "name": "blackName",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "description": "Name of the black player."
            },
            {
              "kind": "field",
              "name": "blackRating",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "description": "Rating of the black player."
            },
            {
              "kind": "field",
              "name": "blackSeconds",
              "type": {
                "text": "number | null"
              },
              "default": "null",
              "description": "Time left for black player in seconds. This will be formatted in separate minutes, seconds and second fractions\nfor time display. For freely formatted time display, use the `blackTime` property instead."
            },
            {
              "kind": "field",
              "name": "blackTime",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "description": "Time left for black player as a formatted string. Ignored if `blackSeconds` is set."
            },
            {
              "kind": "field",
              "name": "blackTitle",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "description": "Title of the black player."
            },
            {
              "kind": "field",
              "name": "colorSquares",
              "type": {
                "text": "{ color: string, square: BoardSquare }[]"
              },
              "default": "[]",
              "description": "Square codes with associated color masks to add to them."
            },
            {
              "kind": "field",
              "name": "countdown",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If `true`, the time remaining for the player in turn will count down."
            },
            {
              "kind": "field",
              "name": "countdownTimeout",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "draggablePieces",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If `true`, pieces on the board are draggable to other squares."
            },
            {
              "kind": "field",
              "name": "dropOffBoard",
              "type": {
                "text": "OffBoardAction"
              },
              "default": "'snapback'",
              "description": "If `'snapback'`, pieces dropped off the board will return to their original square. If `'trash'`, pieces dropped\noff the board will be removed from the board.\n\nThis property has no effect when `draggable` is `false`."
            },
            {
              "kind": "field",
              "name": "moveSpeed",
              "type": {
                "text": "AnimationSpeed"
              },
              "default": "200",
              "description": "Animation speed for when pieces move between squares or from spare pieces to the board."
            },
            {
              "kind": "field",
              "name": "orientation",
              "type": {
                "text": "SquareColor"
              },
              "default": "'white'",
              "description": "The orientation of the board. `'white'` for the white player at the bottom, `'black'` for the black player at\nthe bottom."
            },
            {
              "kind": "field",
              "name": "pieceTheme",
              "type": {
                "text": "string | ((piece: ChessPiece) => string) | undefined"
              },
              "description": "A template string or function used to determine the source of piece images, used by the default `renderPiece`\nfunction, which renders an `<img>` element.\n\nIf `pieceTheme` is a string, the pattern {piece} will be replaced by the piece code. The result should be an\n`<img>` source.\n\nIf `pieceTheme` is a function the first argument is the piece code. The function should return an `<img>` source."
            },
            {
              "kind": "field",
              "name": "renderPiece",
              "type": {
                "text": "RenderPieceFunction | undefined"
              },
              "description": "A function that renders DOM for a piece to a container element. This function can render any elements and text,\nincluding SVG.\n\nThe default value renders an SVG image of the piece, unless the `pieceTheme` property is set, then it uses\n`pieceTheme` to get the URL for an `<img>` element.",
              "default": "Function"
            },
            {
              "kind": "field",
              "name": "snapbackSpeed",
              "type": {
                "text": "AnimationSpeed"
              },
              "default": "100",
              "description": "Animation speed for when pieces that were dropped outside the board return to their original square."
            },
            {
              "kind": "field",
              "name": "snapSpeed",
              "type": {
                "text": "AnimationSpeed"
              },
              "default": "50",
              "description": "Animation speed for when pieces \\\"snap\\\" to a square when dropped."
            },
            {
              "kind": "field",
              "name": "sparePieces",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If `true`, the board will have spare pieces that can be dropped onto the board. If `sparePieces` is set to\n`true`, `draggablePieces` gets set to `true` as well."
            },
            {
              "kind": "field",
              "name": "squareMarkers",
              "type": {
                "text": "SquareMarker[]"
              },
              "default": "[]",
              "description": "List of markers to overlay on the given squares."
            },
            {
              "kind": "field",
              "name": "straightArrows",
              "type": {
                "text": "StraightArrow[]"
              },
              "default": "[]",
              "description": "A list of straight arrows to draw on the board."
            },
            {
              "kind": "field",
              "name": "superfluousPieces",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "If `true`, more pieces of a kind can be added to the board than is allowed by the rules."
            },
            {
              "kind": "field",
              "name": "trashSpeed",
              "type": {
                "text": "AnimationSpeed"
              },
              "default": "100",
              "description": "Animation speed for when pieces are removed."
            },
            {
              "kind": "field",
              "name": "turn",
              "type": {
                "text": "SquareColor | null"
              },
              "default": "null",
              "description": "The player in turn. This only affects the appearance of player details and possible time countdown.\nEither `black` or `white`."
            },
            {
              "kind": "field",
              "name": "whiteName",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "description": "Name of the white player."
            },
            {
              "kind": "field",
              "name": "whiteRating",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "description": "Rating of the white player."
            },
            {
              "kind": "field",
              "name": "whiteSeconds",
              "type": {
                "text": "number | null"
              },
              "default": "null",
              "description": "Time left for white player in seconds. This will be formatted in separate minutes, seconds and second fractions\nfor time display. For freely formatted time display, use the `whiteTime` property instead."
            },
            {
              "kind": "field",
              "name": "whiteTime",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "description": "Time left for white player as a formatted string. Ignored if `whiteSeconds` is set."
            },
            {
              "kind": "field",
              "name": "whiteTitle",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "description": "Title of the white player."
            },
            {
              "kind": "field",
              "name": "_draggedPieceElement",
              "type": {
                "text": "HTMLElement"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#highlightSquares",
              "privacy": "private",
              "default": "new Map<BoardSquare, HighlightStyle >()"
            },
            {
              "kind": "field",
              "name": "#animations",
              "privacy": "private",
              "default": "new Map<BoardLocation, Animation>()"
            },
            {
              "kind": "field",
              "name": "#currentPosition",
              "privacy": "private",
              "type": {
                "text": "BoardPositionObject"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "#dragState",
              "privacy": "private",
              "type": {
                "text": "DragState | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#isDragging",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "description": "Is the current drag state \"dragging\".",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#squareSize",
              "privacy": "private",
              "description": "Get the edge length of a single square in pixels.",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "#concatParts",
              "privacy": "private",
              "parameters": [
                {
                  "name": "parts",
                  "type": {
                    "text": "string[]"
                  },
                  "description": "List of part names (empty strings are omitted)."
                }
              ],
              "description": "Build a list of CSS parts from the given part names.",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "#getSquareElement",
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "square",
                  "type": {
                    "text": "BoardSquare"
                  },
                  "description": "Square code."
                }
              ],
              "description": "Get the HTML element of the given `square`."
            },
            {
              "kind": "method",
              "name": "#getSparePieceElement",
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "piece",
                  "type": {
                    "text": "ChessPiece"
                  },
                  "description": "Piece code."
                }
              ],
              "description": "Get the HTML element for the give spare `piece`."
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "method",
              "name": "#renderGameDetails",
              "privacy": "private",
              "parameters": [
                {
                  "name": "color",
                  "type": {
                    "text": "SquareColor"
                  },
                  "description": "Color of the player."
                }
              ],
              "description": "Render player details if they are available."
            },
            {
              "kind": "method",
              "name": "#renderSparePieces",
              "privacy": "private",
              "parameters": [
                {
                  "name": "color",
                  "type": {
                    "text": "SquareColor"
                  },
                  "description": "Color of the side with the spare pieces."
                }
              ],
              "description": "Render spare pieces of the given `color`. Pieces are rendered on an additional row instead of the player details."
            },
            {
              "kind": "method",
              "name": "#renderDraggedPiece",
              "privacy": "private",
              "description": "Render the piece that is being dragged."
            },
            {
              "kind": "method",
              "name": "#renderBoard",
              "privacy": "private",
              "description": "Render the chess board and pieces on the board."
            },
            {
              "kind": "method",
              "name": "#renderPiece",
              "privacy": "private",
              "parameters": [
                {
                  "name": "piece",
                  "type": {
                    "text": "ChessPiece | undefined"
                  },
                  "description": "The piece to render."
                },
                {
                  "name": "styles",
                  "type": {
                    "text": "Partial<CSSStyleDeclaration>"
                  },
                  "description": "Additional piece styles."
                },
                {
                  "name": "isDragSource",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "Is this piece currently being dragged."
                },
                {
                  "name": "id",
                  "optional": true,
                  "type": {
                    "text": "string"
                  },
                  "description": "Optional piece ID."
                },
                {
                  "name": "part",
                  "optional": true,
                  "type": {
                    "text": "string"
                  },
                  "description": "Additional CSS parts."
                }
              ],
              "description": "Render the the given piece on the board."
            },
            {
              "kind": "method",
              "name": "#getAnimationStyles",
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "piece",
                  "type": {
                    "text": "ChessPiece | undefined"
                  },
                  "description": "The chess piece."
                },
                {
                  "name": "animation",
                  "optional": true,
                  "type": {
                    "text": "Animation | undefined"
                  },
                  "description": "Possible animation."
                }
              ],
              "description": "Get possible `animation` styles for the given `piece`."
            },
            {
              "kind": "method",
              "name": "#pointerdownSquare",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "PointerEvent | TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#pointerdownSparePiece",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "PointerEvent | TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#pointerenterSquare",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#pointerleaveSquare",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "PointerEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#pointermoveWindow",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "PointerEvent | TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#pointerupWindow",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "PointerEvent | TouchEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#calculateAnimations",
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "pos1",
                  "type": {
                    "text": "BoardPositionObject"
                  },
                  "description": "First (starting) board position."
                },
                {
                  "name": "pos2",
                  "type": {
                    "text": "BoardPositionObject"
                  },
                  "description": "Second (ending) board position."
                }
              ],
              "description": "Calculate an array of animations that need to happen in order to get from `pos1` to `pos2`."
            },
            {
              "kind": "method",
              "name": "#doAnimations",
              "privacy": "private",
              "parameters": [
                {
                  "name": "animations",
                  "type": {
                    "text": "Animation[]"
                  },
                  "description": "Array of animations to perform."
                },
                {
                  "name": "oldPos",
                  "type": {
                    "text": "BoardPositionObject"
                  },
                  "description": "The starting board position."
                },
                {
                  "name": "newPos",
                  "type": {
                    "text": "BoardPositionObject"
                  },
                  "description": "The resulting board position."
                }
              ],
              "description": "Perform the given `animations` to change the state of the board."
            },
            {
              "kind": "method",
              "name": "#dropDraggedPieceOnSquare",
              "privacy": "private",
              "parameters": [
                {
                  "name": "square",
                  "type": {
                    "text": "BoardLocation"
                  },
                  "description": "The target square name."
                }
              ],
              "description": "Place the currently dragged piece on the given `square`.",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "#error",
              "privacy": "private",
              "parameters": [
                {
                  "name": "code",
                  "type": {
                    "text": "number"
                  },
                  "description": "Error code."
                },
                {
                  "name": "msg",
                  "type": {
                    "text": "string"
                  },
                  "description": "Error message."
                },
                {
                  "name": "_obj",
                  "optional": true,
                  "type": {
                    "text": "unknown"
                  },
                  "description": "Possible error object?"
                }
              ],
              "description": "Create and dispatch a new error.",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "#highlightSquare",
              "privacy": "private",
              "parameters": [
                {
                  "name": "square",
                  "type": {
                    "text": "BoardSquare"
                  },
                  "description": "Square name."
                },
                {
                  "name": "value",
                  "default": "null as HighlightStyle | null",
                  "description": "Optional highlight style."
                }
              ],
              "description": "Highlight the given square."
            },
            {
              "kind": "method",
              "name": "#isXYOnSquare",
              "privacy": "private",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "parameters": [
                {
                  "name": "x",
                  "type": {
                    "text": "number"
                  },
                  "description": "Pointer x-position."
                },
                {
                  "name": "y",
                  "type": {
                    "text": "number"
                  },
                  "description": "Pointer y-position."
                }
              ],
              "description": "Check which square (or off the board) the given window x,y position is."
            },
            {
              "kind": "method",
              "name": "#setCurrentPosition",
              "privacy": "private",
              "parameters": [
                {
                  "name": "position",
                  "type": {
                    "text": "BoardPositionObject"
                  },
                  "description": "The position to set."
                },
                {
                  "name": "playerMove",
                  "default": "true",
                  "description": "Is this position change a move made by a player (default true)."
                }
              ],
              "description": "Set the board to the given board `position`."
            },
            {
              "kind": "method",
              "name": "#snapbackDraggedPiece",
              "privacy": "private",
              "description": "Perform a 'snapback' action for the given piece, or trash it if it is a spare piece.",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "#startDraggingPiece",
              "privacy": "private",
              "parameters": [
                {
                  "name": "source",
                  "type": {
                    "text": "BoardLocation"
                  },
                  "description": "Source square of the dragged piece."
                },
                {
                  "name": "piece",
                  "type": {
                    "text": "ChessPiece"
                  },
                  "description": "The dragged chess piece."
                },
                {
                  "name": "x",
                  "type": {
                    "text": "number"
                  },
                  "description": "Window x-position of the pointer at start of the drag operation."
                },
                {
                  "name": "y",
                  "type": {
                    "text": "number"
                  },
                  "description": "Window y-position of the pointer at start of the drag operation."
                }
              ],
              "description": "Start dragging a chess `piece`."
            },
            {
              "kind": "method",
              "name": "#stopDraggingPiece",
              "privacy": "private",
              "parameters": [
                {
                  "name": "location",
                  "type": {
                    "text": "BoardLocation"
                  },
                  "description": "Board position where the operation stopped."
                }
              ],
              "description": "Stop the piece drag operation."
            },
            {
              "kind": "method",
              "name": "#trashDraggedPiece",
              "privacy": "private",
              "description": "Trash (remove) the currently dragged piece.",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "#updateDraggedPiece",
              "privacy": "private",
              "parameters": [
                {
                  "name": "x",
                  "type": {
                    "text": "number"
                  },
                  "description": "Current window x-position of the pointer."
                },
                {
                  "name": "y",
                  "type": {
                    "text": "number"
                  },
                  "description": "Current window y-position of the pointer."
                }
              ],
              "description": "Update the position of a piece being dragged."
            },
            {
              "kind": "method",
              "name": "setPosition",
              "parameters": [
                {
                  "name": "position",
                  "type": {
                    "text": "BoardPosition"
                  }
                },
                {
                  "name": "useAnimation",
                  "default": "true",
                  "description": "If `true`, animate to the new position. If `false`, show the new position instantly."
                }
              ],
              "description": "Sets the position of the board."
            },
            {
              "kind": "method",
              "name": "start",
              "parameters": [
                {
                  "name": "useAnimation",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If `true`, animate to the new position. If `false`, show the new position instantly."
                }
              ],
              "description": "Sets the board to the start position."
            },
            {
              "kind": "method",
              "name": "clear",
              "parameters": [
                {
                  "name": "useAnimation",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If `true`, animate to the new position. If `false`, show the new position instantly."
                }
              ],
              "description": "Removes all the pieces on the board. If `useAnimation` is `false`, removes\npieces instantly.\n\nThis is shorthand for `setPosition({})`."
            },
            {
              "kind": "method",
              "name": "move",
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Array<string | false>"
                  }
                }
              ],
              "description": "Executes one or more moves on the board.\n\nMoves are strings the form of \"e2-e4\", \"f6-d5\", etc., Pass `false` as an argument to disable animation."
            },
            {
              "kind": "method",
              "name": "flip",
              "description": "Flip the orientation."
            },
            {
              "kind": "method",
              "name": "resize",
              "description": "Recalculates board and square sizes based on the parent element and redraws the board accordingly."
            },
            {
              "kind": "method",
              "name": "firstUpdated"
            }
          ],
          "events": [
            {
              "name": "mouseover-square",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Fired when the cursor is over a square The event's `detail` object has the following properties: * `square`: the square that was entered * `piece`: the piece on that square (or `false` if there is no piece) * `position`: the current position * `orientation`: the current orientation. Note that `mouseover-square` will *not* fire during piece drag and drop. Use `drag-move` instead."
            },
            {
              "name": "mouseout-square",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Fired when the cursor exits a square The event's `detail` object has the following properties: `square`: the square that was left `piece`: the piece on that square (or `false` if there is no piece) `position`: the current position `orientation`: the current orientation. Note that `mouseout-square` will *not* fire during piece drag and drop. Use `drag-move` instead."
            },
            {
              "name": "move-end",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Fired when a piece move completes The event's `detail` object has the following properties: * `oldPosition`: the old position * `newPosition`: the new position"
            },
            {
              "name": "snap-end",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Fired when a piece completes a snap animation The event's `detail` object has the following properties: * `source`: the source of the dragged piece * `square`: the target of the dragged piece * `piece`: the dragged piece"
            },
            {
              "name": "error",
              "type": {
                "text": "ErrorEvent"
              },
              "description": "Fired in the case of invalid attributes."
            },
            {
              "name": "change",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Fired when the board position changes The event's `detail` property has two properties: * `newPosition`: the new position * `newFen`: FEN for the new position * `oldPosition`: the old position * `noldFen`: FEN for the old position **Warning**: do *not* call any position-changing methods in your event listener or you may cause an infinite loop. BoardPosition-changing methods are: `clear()`, `move()`, `position()`, and `start()`."
            },
            {
              "name": "snapback-end",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Fired when the snapback animation is complete when pieces are dropped off the board. The event's `detail` object has the following properties: * `piece`: the dragged piece * `square`: the square the piece returned to * `position`: the current position * `orientation`: the current orientation."
            },
            {
              "name": "drag-move",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Fired when a user-initiated drag moves The event's `detail` object has the following properties: * `newLocation`: the new location of the piece * `oldLocation`: the old location of the piece * `source`: the source of the dragged piece * `piece`: the piece * `position`: the current position on the board * `orientation`: the current orientation."
            },
            {
              "description": "Fired when a piece is picked up The event's `detail` object has the following properties: * `source`: the source of the piece * `piece`: the piece * `position`: the current position on the board * `orientation`: the current orientation. The drag action is prevented if the listener calls `event.preventDefault()`.",
              "name": "drag-start"
            },
            {
              "description": "Fired when a user-initiated drag ends The event's `detail` object has the following properties: * `source`: the source of the dragged piece * `target`: the target of the dragged piece * `piece`: the piece * `newPosition`: the new position once the piece drops * `oldPosition`: the old position before the piece was picked up * `orientation`: the current orientation. * `setAction(action)`: a function to call to change the default action. If `'snapback'` is passed to `setAction`, the piece will return to it's source square. If `'trash'` is passed to `setAction`, the piece will be removed.",
              "name": "drop"
            }
          ],
          "superclass": {
            "name": "LitElement",
            "package": "lit"
          },
          "customElement": true
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ChessBoard",
          "declaration": {
            "name": "ChessBoard",
            "module": "src/chessboard.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/index.ts",
      "declarations": [],
      "exports": [
        {
          "kind": "js",
          "name": "AnimationSpeed",
          "declaration": {
            "name": "AnimationSpeed",
            "module": "src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "BoardSquare",
          "declaration": {
            "name": "BoardSquare",
            "module": "src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "ChessBoard",
          "declaration": {
            "name": "ChessBoard",
            "module": "src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "ChessboardEvent",
          "declaration": {
            "name": "ChessboardEvent",
            "module": "src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "ChessPiece",
          "declaration": {
            "name": "ChessPiece",
            "module": "src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "HighlightStyle",
          "declaration": {
            "name": "HighlightStyle",
            "module": "src/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "ChessBoard",
            "module": "src/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/types.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "umd/chessboard-component.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "t"
        },
        {
          "kind": "variable",
          "name": "g",
          "default": "class extends ct { static { n(this, \"ChessBoard\"); } constructor() { super(...arguments), nt(this, h), this.hideNotation = !1, this.adjustByHeight = !1, this.angledArrows = [], this.appearSpeed = Ls, this.availableBoardPieces = null, this.availableSparePieces = null, this.blackName = null, this.blackRating = null, this.blackSeconds = null, this.blackTime = null, this.blackTitle = null, this.colorSquares = [], this.countdown = !1, this.countdownTimeout = 0, this.draggablePieces = !1, this.dropOffBoard = \"snapback\", this.moveSpeed = xs, this.orientation = \"white\", this.renderPiece = (t, e) => { let r; st(this.pieceTheme) ? r = U(this.pieceTheme, { piece: t }) : Wt(this.pieceTheme) && (r = this.pieceTheme(t)), r === void 0 ? fs(t, e) : Ft(P`<img class=\"piece-image\" src=${r} />`, e); }, this.snapbackSpeed = Ms, this.snapSpeed = qs, this.sparePieces = !1, this.squareMarkers = [], this.straightArrows = [], this.superfluousPieces = !1, this.trashSpeed = Os, this.turn = null, this.whiteName = null, this.whiteRating = null, this.whiteSeconds = null, this.whiteTime = null, this.whiteTitle = null, nt(this, et, /* @__PURE__ */ new Map()), nt(this, O, /* @__PURE__ */ new Map()), nt(this, v, {}), nt(this, m); } /** * The current position as a FEN string. */ get fen() { return Y(l(this, v)); } get position() { return l(this, v); } set position(t) { const e = l(this, v); p(this, h, ft).call(this, t), this.requestUpdate(\"position\", e); } /** * Whether to show the board notation. This is always the inverse of `hideNotation`, which reflects the * `hide-notation` attribute. */ get showNotation() { return !this.hideNotation; } set showNotation(t) { this.hideNotation = !t; } // ------------------------------------------------------------------------- // DOM Building // ------------------------------------------------------------------------- render() { const t = { height: `${!this.sparePieces && (this.blackName || this.whiteName) ? l(this, h, E) : 0}px`, width: `${!this.sparePieces && (this.blackName || this.whiteName) ? 8 * l(this, h, E) : 0}px`, // Set base font size to adjust label sizes according to board size. fontSize: `${l(this, h, E)}px` }, e = { height: `${this.sparePieces ? l(this, h, E) : 0}px`, width: `${this.sparePieces ? 8 * l(this, h, E) : 0}px` }; return P` <div part=\"wrapper\"> <div part=\"spare-pieces\" style=\"${R(e)}\"> ${p(this, h, Tt).call(this, this.orientation === \"white\" ? \"black\" : \"white\")} </div> <div part=\"game-details\" style=\"${R(t)}\"> ${p(this, h, At).call(this, this.orientation === \"white\" ? \"black\" : \"white\")} </div> ${p(this, h, $e).call(this)} <div part=\"game-details\" style=\"${R(t)}\"> ${p(this, h, At).call(this, this.orientation === \"white\" ? \"white\" : \"black\")} </div> <div part=\"spare-pieces\" style=\"${R(e)}\"> ${p(this, h, Tt).call(this, this.orientation === \"white\" ? \"white\" : \"black\")} </div> <div id=\"dragged-pieces\" part=\"dragged-pieces\" style=${R({ width: \"0px\", height: \"0px\", cursor: \"grabbing\", overflow: \"visible\" })} > ${p(this, h, be).call(this)} </div> </div> `; } // ------------------------------------------------------------------------- // Public Methods // ------------------------------------------------------------------------- /** * Sets the position of the board. * @param useAnimation If `true`, animate to the new position. If `false`, show the new position instantly. */ setPosition(t, e = !0) { if (t = ge(t), !L(t)) throw p(this, h, vt).call(this, 6482, \"Invalid value passed to the position method.\", t); if (e) { const r = p(this, h, ke).call(this, l(this, v), t); p(this, h, Se).call(this, r, l(this, v), t); } p(this, h, ft).call(this, t), this.requestUpdate(); } /** * Sets the board to the start position. * @param useAnimation If `true`, animate to the new position. If `false`, show the new position instantly. */ start(t) { this.setPosition(\"start\", t); } /** * Removes all the pieces on the board. If `useAnimation` is `false`, removes * pieces instantly. * * This is shorthand for `setPosition({})`. * * @param useAnimation If `true`, animate to the new position. If `false`, show the new position instantly. */ clear(t) { this.setPosition({}, t); } /** * Executes one or more moves on the board. * * Moves are strings the form of \"e2-e4\", \"f6-d5\", etc., Pass `false` as an argument to disable animation. */ move(...t) { let e = !0; const r = {}; for (const o of t) { if (o === !1) { e = !1; continue; } if (!$s(o)) { p(this, h, vt).call(this, 2826, \"Invalid move passed to the move method.\", o); continue; } const [a, d] = o.split(\"-\"); r[a] = d; } const i = Es(l(this, v), r); return this.setPosition(i, e), i; } /** * Flip the orientation. */ flip() { this.orientation = this.orientation === \"white\" ? \"black\" : \"white\"; } /** * Recalculates board and square sizes based on the parent element and redraws the board accordingly. */ resize() { this.requestUpdate(); } // ------------------------------------------------------------------------- // Lifecycle Callbacks // ------------------------------------------------------------------------- firstUpdated() { this.requestUpdate(), window.ResizeObserver !== void 0 && new ResizeObserver(() => { this.resize(); }).observe(this); } connectedCallback() { super.connectedCallback(), window.addEventListener(\"pointermove\", p(this, h, at).bind(this)), window.addEventListener(\"pointerup\", p(this, h, lt).bind(this)), window.addEventListener(\"touchmove\", p(this, h, at).bind(this), { passive: !1 }), window.addEventListener(\"touchend\", p(this, h, lt).bind(this), { passive: !1 }); } disconnectedCallback() { super.disconnectedCallback(), window.removeEventListener(\"pointermove\", p(this, h, at).bind(this)), window.removeEventListener(\"pointerup\", p(this, h, lt).bind(this)), window.removeEventListener(\"touchmove\", p(this, h, at).bind(this)), window.removeEventListener(\"touchend\", p(this, h, lt).bind(this)); } }"
        },
        {
          "kind": "variable",
          "name": "s"
        },
        {
          "kind": "variable",
          "name": "Ds",
          "default": "g"
        }
      ],
      "exports": [
        {
          "kind": "custom-element-definition",
          "name": "s",
          "declaration": {
            "name": "t",
            "module": "umd/chessboard-component.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "s",
          "declaration": {
            "name": "t",
            "module": "umd/chessboard-component.js"
          }
        },
        {
          "kind": "js",
          "name": "ChessBoard",
          "declaration": {
            "name": "g",
            "module": "umd/chessboard-component.js"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "Ds",
            "module": "umd/chessboard-component.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/utils/chessboard-styles.js",
      "declarations": [
        {
          "kind": "variable",
          "name": "presetColors",
          "type": {
            "text": "object"
          },
          "default": "{ blue: `rgb(0, 110, 255)`, cyan: `rgb(0, 175, 225)`, green: `rgb(0, 200, 0)`, grey: `rgb(127, 127, 127)`, orange: `rgb(255, 127, 0)`, // Not so visible against the standard board. purple: `rgb(200, 0, 100)`, red: `rgb(255, 0, 0)`, yellow: `rgb(225, 200, 0)`, }",
          "description": "Set of preset colors. A preset color can be used by referring to it by starting the color name with `@`,\nfor example `@red`."
        },
        {
          "kind": "variable",
          "name": "styles",
          "default": "css ` :root { font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif; font-weight: 400; color-scheme: light dark; font-synthesis: none; text-rendering: optimizeLegibility; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } :host { display: block; position: relative; --dark-color: #b58863; --highlight-color-active: yellow; --highlight-color-available: yellowgreen; --highlight-color-previous: steelblue; --highlight-color-unavailable: gray; --light-color: #f0d9b5; --preset-color-blue: rgb(0, 110, 255); --preset-color-cyan: rgb(0, 175, 225); --preset-color-green: rgb(0, 200, 0); --preset-color-grey: rgb(127, 127, 127); --preset-color-orange: rgb(255, 127, 0); --preset-color-purple: rgb(200, 0, 100); --preset-color-red: rgb(255, 0, 0); --preset-color-yellow: rgb(225, 200, 0); --time-low-color: rgb(175, 0, 0); } [part~='wrapper'] { display: flex; flex-direction: column; align-items: center; justify-content: center; } [part~='board'] { position: relative; border: 2px solid #404040; box-sizing: border-box; display: grid; grid-template-columns: repeat(8, 12.5%); grid-template-rows: repeat(8, 12.5%); } [part~='square'] { position: relative; /* disable any native browser highlighting */ -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; } [part~='piece'] { width: 100%; height: 100%; } [part~='piece'] .piece-image { position: absolute; z-index: 10; } [part~='spare-pieces'] { display: grid; position: relative; padding: 0 2px; grid-template-columns: repeat(8, 12.5%); } [part~='spare-piece'] .piece-image { position: static; cursor: move; cursor: grab; } [part~='game-details'] { display: flex; flex-direction: row; position: relative; overflow: hidden; } [part~='player-details'] { flex: 1 1 0; font-size: inherit; padding-left: 2px; font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif; } [part~='player-name'] { height: 1.25em; line-height: 1.5em; font-size: 0.5em; } [part~='player-turn'] [part~='player-name'] { font-weight: 700; } [part~='player-rating'] { height: 1.5em; font-size: 0.25em; } [part~='player-timer'] { display: flex; flex-direction: row; font-family: Courier, monospace; font-size: 0.5em; line-height: 2em; padding-right: 2px; } [part~='timer-low'] { font-weight: 700; color: var(--time-low-color); } [part~='timer-fraction'] { font-size: 0.8em; line-height: 2.7em; } [part~='dragged-piece'] { display: none; position: absolute; } [part~='white'] { background-color: var(--light-color); color: var(--dark-color); } [part~='black'] { background-color: var(--dark-color); color: var(--light-color); } [part~='draggable'] { cursor: move; cursor: grab; } [part~='disabled'] .piece-image { cursor: default; opacity: 0.5; pointer-events: none; } [part~='highlight-active'] { box-shadow: inset 0 0 1px 5px var(--highlight-color-active); } [part~='highlight-available'] { box-shadow: inset 0 0 1px 5px var(--highlight-color-available); } [part~='highlight-previous'] { box-shadow: inset 0 0 1px 5px var(--highlight-color-previous); } [part~='highlight-unavailable'] { box-shadow: inset 0 0 1px 5px var(--highlight-color-unavailable); } [part~='notation'] { cursor: default; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; position: absolute; } [part~='alpha'] { bottom: 1%; right: 5%; } [part~='numeric'] { top: 3%; left: 3%; } `"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "presetColors",
          "declaration": {
            "name": "presetColors",
            "module": "dist/utils/chessboard-styles.js"
          }
        },
        {
          "kind": "js",
          "name": "styles",
          "declaration": {
            "name": "styles",
            "module": "dist/utils/chessboard-styles.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/utils/index.js",
      "declarations": [
        {
          "kind": "function",
          "name": "isString",
          "parameters": [
            {
              "name": "s",
              "description": "Possible string."
            }
          ],
          "description": "Type-safe check to see if a value is a string or not.",
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "function",
          "name": "isFunction",
          "parameters": [
            {
              "name": "f",
              "description": "Possible function."
            }
          ],
          "description": "Type-safe check to see if a value is a function or not.",
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "function",
          "name": "isInteger",
          "parameters": [
            {
              "name": "n"
            },
            {
              "description": "Possible number.",
              "name": "s"
            }
          ],
          "description": "Type-safe check to see if a value is a number or not.",
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "function",
          "name": "deepCopy",
          "parameters": [
            {
              "name": "thing",
              "description": "Object to copy."
            }
          ],
          "description": "Make a new copy of an object and all its child properties.",
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "function",
          "name": "interpolateTemplate",
          "parameters": [
            {
              "name": "str"
            },
            {
              "name": "obj"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "START_FEN",
          "type": {
            "text": "string"
          },
          "default": "'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR'",
          "description": "CHESS UTILITIES."
        },
        {
          "kind": "variable",
          "name": "COLUMNS"
        },
        {
          "kind": "variable",
          "name": "whitePieces",
          "type": {
            "text": "array"
          },
          "default": "['wK', 'wQ', 'wR', 'wB', 'wN', 'wP']"
        },
        {
          "kind": "variable",
          "name": "blackPieces",
          "type": {
            "text": "array"
          },
          "default": "['bK', 'bQ', 'bR', 'bB', 'bN', 'bP']"
        },
        {
          "kind": "function",
          "name": "getSquareColor",
          "parameters": [
            {
              "name": "square",
              "description": "Square code."
            }
          ],
          "description": "Get the color of the given square.",
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "function",
          "name": "isValidSquare",
          "parameters": [
            {
              "name": "square",
              "description": "Square code to check."
            }
          ],
          "description": "Check if the given string is a valid board square.",
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "function",
          "name": "isValidMove",
          "parameters": [
            {
              "name": "move",
              "description": "Move to check."
            }
          ],
          "description": "Check if the given move is valid or not.",
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "function",
          "name": "isValidPieceCode",
          "parameters": [
            {
              "name": "code"
            }
          ]
        },
        {
          "kind": "function",
          "name": "isValidFen",
          "parameters": [
            {
              "name": "fen",
              "description": "Supposed FEN string."
            }
          ],
          "description": "Check if the given string is a valid FEN position.",
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "function",
          "name": "isValidPositionObject",
          "parameters": [
            {
              "name": "pos",
              "description": "Supposed valid board position."
            }
          ],
          "description": "Check if the given parameter is a valid board position object.",
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "function",
          "name": "fenToObj",
          "parameters": [
            {
              "name": "fen",
              "description": "FEN position string."
            }
          ],
          "description": "Convert a FEN position string into a position object.",
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "variable",
          "name": "START_POSITION"
        },
        {
          "kind": "function",
          "name": "objToFen",
          "parameters": [
            {
              "name": "obj",
              "description": "Position object."
            }
          ],
          "description": "Convert a position object into a FEN position string.",
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "function",
          "name": "normalizePosition",
          "parameters": [
            {
              "name": "position",
              "description": "A position object or description; null or empty string means empty board."
            }
          ],
          "description": "Convert a standard `position` description string into a board position object.",
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "function",
          "name": "findClosestPiece",
          "parameters": [
            {
              "name": "position",
              "description": "Board position."
            },
            {
              "name": "piece",
              "description": "Piece to find."
            },
            {
              "name": "square",
              "description": "Square to check."
            }
          ],
          "description": "Find the closest instance of given `piece` from the given `square`.",
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "function",
          "name": "calculatePositionFromMoves",
          "parameters": [
            {
              "name": "position",
              "description": "Board position to start from."
            },
            {
              "name": "moves",
              "description": "List of moves as a object `{ [<from>: square code]: <to>: board square }`."
            }
          ],
          "description": "Get the new board position after the given set of (valid) `moves`.",
          "return": {
            "type": {
              "text": ""
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "StraightArrow",
          "declaration": {
            "name": "StraightArrow",
            "module": "dist/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "pieces",
          "declaration": {
            "name": "pieces",
            "module": "dist/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "styles",
          "declaration": {
            "name": "styles",
            "module": "dist/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "renderPiece",
          "declaration": {
            "name": "renderPiece",
            "module": "dist/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "isString",
          "declaration": {
            "name": "isString",
            "module": "dist/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "isFunction",
          "declaration": {
            "name": "isFunction",
            "module": "dist/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "isInteger",
          "declaration": {
            "name": "isInteger",
            "module": "dist/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "deepCopy",
          "declaration": {
            "name": "deepCopy",
            "module": "dist/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "interpolateTemplate",
          "declaration": {
            "name": "interpolateTemplate",
            "module": "dist/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "START_FEN",
          "declaration": {
            "name": "START_FEN",
            "module": "dist/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "COLUMNS",
          "declaration": {
            "name": "COLUMNS",
            "module": "dist/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "whitePieces",
          "declaration": {
            "name": "whitePieces",
            "module": "dist/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "blackPieces",
          "declaration": {
            "name": "blackPieces",
            "module": "dist/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "getSquareColor",
          "declaration": {
            "name": "getSquareColor",
            "module": "dist/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "isValidSquare",
          "declaration": {
            "name": "isValidSquare",
            "module": "dist/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "isValidMove",
          "declaration": {
            "name": "isValidMove",
            "module": "dist/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "isValidPieceCode",
          "declaration": {
            "name": "isValidPieceCode",
            "module": "dist/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "isValidFen",
          "declaration": {
            "name": "isValidFen",
            "module": "dist/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "isValidPositionObject",
          "declaration": {
            "name": "isValidPositionObject",
            "module": "dist/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "fenToObj",
          "declaration": {
            "name": "fenToObj",
            "module": "dist/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "START_POSITION",
          "declaration": {
            "name": "START_POSITION",
            "module": "dist/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "objToFen",
          "declaration": {
            "name": "objToFen",
            "module": "dist/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "normalizePosition",
          "declaration": {
            "name": "normalizePosition",
            "module": "dist/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "findClosestPiece",
          "declaration": {
            "name": "findClosestPiece",
            "module": "dist/utils/index.js"
          }
        },
        {
          "kind": "js",
          "name": "calculatePositionFromMoves",
          "declaration": {
            "name": "calculatePositionFromMoves",
            "module": "dist/utils/index.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/utils/overlays.js",
      "declarations": [
        {
          "kind": "class",
          "description": "A marker placed over a square on the board.",
          "name": "SquareMarker",
          "members": [
            {
              "kind": "field",
              "name": "lineWidth",
              "description": "Line width of the marker as a fraction of square size."
            },
            {
              "kind": "method",
              "name": "getSvg"
            },
            {
              "kind": "field",
              "name": "_lineWidth",
              "type": {
                "text": "number"
              },
              "default": "0.125"
            },
            {
              "kind": "field",
              "name": "_square",
              "default": "square"
            },
            {
              "kind": "field",
              "name": "_type",
              "default": "type"
            },
            {
              "kind": "field",
              "name": "_color",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "description": "Arrow color.",
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_opacity",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "description": "Arrow opacity.",
              "default": "opacity",
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "squareWidth",
              "description": "Width of a single board square in percents.",
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStyles",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "extra",
                  "optional": true,
                  "type": {
                    "text": "{[key: string]: string | number }"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getSquareCoordinates",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "square",
                  "type": {
                    "text": "BoardSquare"
                  },
                  "description": "Square code."
                }
              ],
              "description": "Auxiliary function to convert a `square` code to an array of x,y coordinates.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            }
          ],
          "superclass": {
            "name": "BoardOverlay",
            "module": "dist/utils/overlays.js"
          }
        },
        {
          "kind": "class",
          "description": "Creates a board overlay with an arrow pointing from one square to another. The created arrow always points straight\nfrom the origin to the target, even when the move is not along a board axis.",
          "name": "StraightArrow",
          "members": [
            {
              "kind": "field",
              "name": "START_OFFSET",
              "static": true,
              "description": "Arrow start distance from the square center as a fraction of square size. Value between `0` and `0.5`.\nValue 0 starts the arrow at the square center and value 0.5 at the square edge (for arrows along a board axis)."
            },
            {
              "kind": "field",
              "name": "START_OFFSET",
              "static": true
            },
            {
              "kind": "field",
              "name": "TARGET_OFFSET",
              "static": true,
              "description": "Distance of the arrow point from the center of the target square as a fraction of square size.\nValue between `0` and `0.5`. 0 ends the arrow at the center of the target square, while 0.5 ends it at the\ntarget square edge (for arrows along a board axis)."
            },
            {
              "kind": "field",
              "name": "TARGET_OFFSET",
              "static": true
            },
            {
              "kind": "field",
              "name": "arrowSize",
              "description": "Width of the arrow shaft as a fraction of square size."
            },
            {
              "kind": "method",
              "name": "_getStartOffset",
              "parameters": [
                {
                  "name": "origin",
                  "description": "Coordinates for the origin square."
                },
                {
                  "name": "target",
                  "description": "Coordinates for the target square."
                }
              ],
              "description": "Calculate arrow offset from square center for an angled arrow.",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "getSvg",
              "description": "Get SVG markup for the arrow.",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "_arrowSize",
              "type": {
                "text": "number"
              },
              "default": "0.25"
            },
            {
              "kind": "field",
              "name": "_id",
              "default": "arrowNr++"
            },
            {
              "kind": "field",
              "name": "_origin",
              "default": "origin"
            },
            {
              "kind": "field",
              "name": "_target",
              "default": "target"
            },
            {
              "kind": "field",
              "name": "_color",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "description": "Arrow color.",
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_opacity",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "description": "Arrow opacity.",
              "default": "opacity",
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "squareWidth",
              "description": "Width of a single board square in percents.",
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStyles",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "extra",
                  "optional": true,
                  "type": {
                    "text": "{[key: string]: string | number }"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getSquareCoordinates",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "square",
                  "type": {
                    "text": "BoardSquare"
                  },
                  "description": "Square code."
                }
              ],
              "description": "Auxiliary function to convert a `square` code to an array of x,y coordinates.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            }
          ],
          "superclass": {
            "name": "BoardOverlay",
            "module": "dist/utils/overlays.js"
          }
        },
        {
          "kind": "class",
          "description": "Creates a board overlay with an arrow pointing from one square to another. The arrow shaft(s) will always run along\na board axis, creating a straight angle if needed.",
          "name": "AngledArrow",
          "members": [
            {
              "kind": "method",
              "name": "getSvg",
              "description": "Get SVG markup for the arrow.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_START_OFFSET",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "static": true,
              "default": "0.4",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "START_OFFSET",
              "static": true,
              "description": "Arrow start distance from the square center as a fraction of square size. Value between `0` and `0.5`.\nValue 0 starts the arrow at the square center and value 0.5 at the square edge (for arrows along a board axis).",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_TARGET_OFFSET",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "static": true,
              "default": "0.5",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "TARGET_OFFSET",
              "static": true,
              "description": "Distance of the arrow point from the center of the target square as a fraction of square size.\nValue between `0` and `0.5`. 0 ends the arrow at the center of the target square, while 0.5 ends it at the\ntarget square edge (for arrows along a board axis).",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_arrowSize",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "0.25",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_id",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "description": "Unique ID for matching the arrow head with the shaft.",
              "default": "arrowNr++",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_origin",
              "type": {
                "text": "BoardSquare"
              },
              "privacy": "protected",
              "description": "Origin square of the arrow.",
              "default": "origin",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_target",
              "type": {
                "text": "BoardSquare"
              },
              "privacy": "protected",
              "description": "Target square of the arrow.",
              "default": "target",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "arrowSize",
              "description": "Width of the arrow shaft as a fraction of square size.",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getStartOffset",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "origin",
                  "type": {
                    "text": "number[]"
                  },
                  "description": "Coordinates for the origin square."
                },
                {
                  "name": "target",
                  "type": {
                    "text": "number[]"
                  },
                  "description": "Coordinates for the target square."
                }
              ],
              "description": "Calculate arrow offset from square center for an angled arrow.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_color",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "description": "Arrow color.",
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_opacity",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "description": "Arrow opacity.",
              "default": "opacity",
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "squareWidth",
              "description": "Width of a single board square in percents.",
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStyles",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "extra",
                  "optional": true,
                  "type": {
                    "text": "{[key: string]: string | number }"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getSquareCoordinates",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "square",
                  "type": {
                    "text": "BoardSquare"
                  },
                  "description": "Square code."
                }
              ],
              "description": "Auxiliary function to convert a `square` code to an array of x,y coordinates.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            }
          ],
          "superclass": {
            "name": "StraightArrow",
            "module": "dist/utils/overlays.js"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "PathArrow",
          "members": [
            {
              "kind": "method",
              "name": "getSvg",
              "description": "Get SVG markup for the arrow.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_path",
              "type": {
                "text": "array"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "_START_OFFSET",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "static": true,
              "default": "0.4",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "START_OFFSET",
              "static": true,
              "description": "Arrow start distance from the square center as a fraction of square size. Value between `0` and `0.5`.\nValue 0 starts the arrow at the square center and value 0.5 at the square edge (for arrows along a board axis).",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_TARGET_OFFSET",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "static": true,
              "default": "0.5",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "TARGET_OFFSET",
              "static": true,
              "description": "Distance of the arrow point from the center of the target square as a fraction of square size.\nValue between `0` and `0.5`. 0 ends the arrow at the center of the target square, while 0.5 ends it at the\ntarget square edge (for arrows along a board axis).",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_arrowSize",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "0.25",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_id",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "description": "Unique ID for matching the arrow head with the shaft.",
              "default": "arrowNr++",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_origin",
              "type": {
                "text": "BoardSquare"
              },
              "privacy": "protected",
              "description": "Origin square of the arrow.",
              "default": "origin",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_target",
              "type": {
                "text": "BoardSquare"
              },
              "privacy": "protected",
              "description": "Target square of the arrow.",
              "default": "target",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "arrowSize",
              "description": "Width of the arrow shaft as a fraction of square size.",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getStartOffset",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "origin",
                  "type": {
                    "text": "number[]"
                  },
                  "description": "Coordinates for the origin square."
                },
                {
                  "name": "target",
                  "type": {
                    "text": "number[]"
                  },
                  "description": "Coordinates for the target square."
                }
              ],
              "description": "Calculate arrow offset from square center for an angled arrow.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_color",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "description": "Arrow color.",
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_opacity",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "description": "Arrow opacity.",
              "default": "opacity",
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "squareWidth",
              "description": "Width of a single board square in percents.",
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStyles",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "extra",
                  "optional": true,
                  "type": {
                    "text": "{[key: string]: string | number }"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getSquareCoordinates",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "square",
                  "type": {
                    "text": "BoardSquare"
                  },
                  "description": "Square code."
                }
              ],
              "description": "Auxiliary function to convert a `square` code to an array of x,y coordinates.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            }
          ],
          "superclass": {
            "name": "StraightArrow",
            "module": "dist/utils/overlays.js"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SquareMarker",
          "declaration": {
            "name": "SquareMarker",
            "module": "dist/utils/overlays.js"
          }
        },
        {
          "kind": "js",
          "name": "StraightArrow",
          "declaration": {
            "name": "StraightArrow",
            "module": "dist/utils/overlays.js"
          }
        },
        {
          "kind": "js",
          "name": "AngledArrow",
          "declaration": {
            "name": "AngledArrow",
            "module": "dist/utils/overlays.js"
          }
        },
        {
          "kind": "js",
          "name": "PathArrow",
          "declaration": {
            "name": "PathArrow",
            "module": "dist/utils/overlays.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "dist/utils/wikipedia-pieces-svg.js",
      "declarations": [
        {
          "kind": "function",
          "name": "renderPiece",
          "parameters": [
            {
              "name": "piece"
            },
            {
              "name": "container"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "pieces",
          "type": {
            "text": "object"
          },
          "default": "{ bB: svg ` <g style=\"opacity:1; fill:none; fill-rule:evenodd; fill-opacity:1; stroke:#000000; stroke-width:1.5; stroke-linecap:round; stroke-linejoin:round; stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\"> <g style=\"fill:#000000; stroke:#000000; stroke-linecap:butt;\"> <path d=\"M 9,36 C 12.39,35.03 19.11,36.43 22.5,34 C 25.89,36.43 32.61,35.03 36,36 C 36,36 37.65,36.54 39,38 C 38.32,38.97 37.35,38.99 36,38.5 C 32.61,37.53 25.89,38.96 22.5,37.5 C 19.11,38.96 12.39,37.53 9,38.5 C 7.646,38.99 6.677,38.97 6,38 C 7.354,36.06 9,36 9,36 z\" /> <path d=\"M 15,32 C 17.5,34.5 27.5,34.5 30,32 C 30.5,30.5 30,30 30,30 C 30,27.5 27.5,26 27.5,26 C 33,24.5 33.5,14.5 22.5,10.5 C 11.5,14.5 12,24.5 17.5,26 C 17.5,26 15,27.5 15,30 C 15,30 14.5,30.5 15,32 z\" /> <path d=\"M 25 8 A 2.5 2.5 0 1 1 20,8 A 2.5 2.5 0 1 1 25 8 z\" /> </g> <path d=\"M 17.5,26 L 27.5,26 M 15,30 L 30,30 M 22.5,15.5 L 22.5,20.5 M 20,18 L 25,18\" style=\"fill:none; stroke:#ffffff; stroke-linejoin:miter;\" /> </g> `, wB: svg ` <g style=\"opacity:1; fill:none; fill-rule:evenodd; fill-opacity:1; stroke:#000000; stroke-width:1.5; stroke-linecap:round; stroke-linejoin:round; stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\"> <g style=\"fill:#ffffff; stroke:#000000; stroke-linecap:butt;\"> <path d=\"M 9,36 C 12.39,35.03 19.11,36.43 22.5,34 C 25.89,36.43 32.61,35.03 36,36 C 36,36 37.65,36.54 39,38 C 38.32,38.97 37.35,38.99 36,38.5 C 32.61,37.53 25.89,38.96 22.5,37.5 C 19.11,38.96 12.39,37.53 9,38.5 C 7.646,38.99 6.677,38.97 6,38 C 7.354,36.06 9,36 9,36 z\" /> <path d=\"M 15,32 C 17.5,34.5 27.5,34.5 30,32 C 30.5,30.5 30,30 30,30 C 30,27.5 27.5,26 27.5,26 C 33,24.5 33.5,14.5 22.5,10.5 C 11.5,14.5 12,24.5 17.5,26 C 17.5,26 15,27.5 15,30 C 15,30 14.5,30.5 15,32 z\" /> <path d=\"M 25 8 A 2.5 2.5 0 1 1 20,8 A 2.5 2.5 0 1 1 25 8 z\" /> </g> <path d=\"M 17.5,26 L 27.5,26 M 15,30 L 30,30 M 22.5,15.5 L 22.5,20.5 M 20,18 L 25,18\" style=\"fill:none; stroke:#000000; stroke-linejoin:miter;\" /> </g> `, bK: svg ` <g style=\"fill:none; fill-opacity:1; fill-rule:evenodd; stroke:#000000; stroke-width:1.5; stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\"> <path d=\"M 22.5,11.63 L 22.5,6\" style=\"fill:none; stroke:#000000; stroke-linejoin:miter;\" id=\"path6570\" /> <path d=\"M 22.5,25 C 22.5,25 27,17.5 25.5,14.5 C 25.5,14.5 24.5,12 22.5,12 C 20.5,12 19.5,14.5 19.5,14.5 C 18,17.5 22.5,25 22.5,25\" style=\"fill:#000000;fill-opacity:1; stroke-linecap:butt; stroke-linejoin:miter;\" /> <path d=\"M 11.5,37 C 17,40.5 27,40.5 32.5,37 L 32.5,30 C 32.5,30 41.5,25.5 38.5,19.5 C 34.5,13 25,16 22.5,23.5 L 22.5,27 L 22.5,23.5 C 19,16 9.5,13 6.5,19.5 C 3.5,25.5 11.5,29.5 11.5,29.5 L 11.5,37 z \" style=\"fill:#000000; stroke:#000000;\" /> <path d=\"M 20,8 L 25,8\" style=\"fill:none; stroke:#000000; stroke-linejoin:miter;\" /> <path d=\"M 32,29.5 C 32,29.5 40.5,25.5 38.03,19.85 C 34.15,14 25,18 22.5,24.5 L 22.51,26.6 L 22.5,24.5 C 20,18 9.906,14 6.997,19.85 C 4.5,25.5 11.85,28.85 11.85,28.85\" style=\"fill:none; stroke:#ffffff;\" /> <path d=\"M 11.5,30 C 17,27 27,27 32.5,30 M 11.5,33.5 C 17,30.5 27,30.5 32.5,33.5 M 11.5,37 C 17,34 27,34 32.5,37\" style=\"fill:none; stroke:#ffffff;\" /> </g> `, wK: svg ` <g style=\"fill:none; fill-opacity:1; fill-rule:evenodd; stroke:#000000; stroke-width:1.5; stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\"> <path d=\"M 22.5,11.63 L 22.5,6\" style=\"fill:none; stroke:#000000; stroke-linejoin:miter;\" /> <path d=\"M 20,8 L 25,8\" style=\"fill:none; stroke:#000000; stroke-linejoin:miter;\" /> <path d=\"M 22.5,25 C 22.5,25 27,17.5 25.5,14.5 C 25.5,14.5 24.5,12 22.5,12 C 20.5,12 19.5,14.5 19.5,14.5 C 18,17.5 22.5,25 22.5,25\" style=\"fill:#ffffff; stroke:#000000; stroke-linecap:butt; stroke-linejoin:miter;\" /> <path d=\"M 11.5,37 C 17,40.5 27,40.5 32.5,37 L 32.5,30 C 32.5,30 41.5,25.5 38.5,19.5 C 34.5,13 25,16 22.5,23.5 L 22.5,27 L 22.5,23.5 C 19,16 9.5,13 6.5,19.5 C 3.5,25.5 11.5,29.5 11.5,29.5 L 11.5,37 z \" style=\"fill:#ffffff; stroke:#000000;\" /> <path d=\"M 11.5,30 C 17,27 27,27 32.5,30\" style=\"fill:none; stroke:#000000;\" /> <path d=\"M 11.5,33.5 C 17,30.5 27,30.5 32.5,33.5\" style=\"fill:none; stroke:#000000;\" /> <path d=\"M 11.5,37 C 17,34 27,34 32.5,37\" style=\"fill:none; stroke:#000000;\" /> </g> `, bN: svg ` <g style=\"opacity:1; fill:none; fill-opacity:1; fill-rule:evenodd; stroke:#000000; stroke-width:1.5; stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\"> <path d=\"M 22,10 C 32.5,11 38.5,18 38,39 L 15,39 C 15,30 25,32.5 23,18\" style=\"fill:#000000; stroke:#000000;\" /> <path d=\"M 24,18 C 24.38,20.91 18.45,25.37 16,27 C 13,29 13.18,31.34 11,31 C 9.958,30.06 12.41,27.96 11,28 C 10,28 11.19,29.23 10,30 C 9,30 5.997,31 6,26 C 6,24 12,14 12,14 C 12,14 13.89,12.1 14,10.5 C 13.27,9.506 13.5,8.5 13.5,7.5 C 14.5,6.5 16.5,10 16.5,10 L 18.5,10 C 18.5,10 19.28,8.008 21,7 C 22,7 22,10 22,10\" style=\"fill:#000000; stroke:#000000;\" /> <path d=\"M 9.5 25.5 A 0.5 0.5 0 1 1 8.5,25.5 A 0.5 0.5 0 1 1 9.5 25.5 z\" style=\"fill:#ffffff; stroke:#ffffff;\" /> <path d=\"M 15 15.5 A 0.5 1.5 0 1 1 14,15.5 A 0.5 1.5 0 1 1 15 15.5 z\" transform=\"matrix(0.866,0.5,-0.5,0.866,9.693,-5.173)\" style=\"fill:#ffffff; stroke:#ffffff;\" /> <path d=\"M 24.55,10.4 L 24.1,11.85 L 24.6,12 C 27.75,13 30.25,14.49 32.5,18.75 C 34.75,23.01 35.75,29.06 35.25,39 L 35.2,39.5 L 37.45,39.5 L 37.5,39 C 38,28.94 36.62,22.15 34.25,17.66 C 31.88,13.17 28.46,11.02 25.06,10.5 L 24.55,10.4 z \" style=\"fill:#ffffff; stroke:none;\" /> </g> `, wN: svg ` <g style=\"opacity:1; fill:none; fill-opacity:1; fill-rule:evenodd; stroke:#000000; stroke-width:1.5; stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\"> <path d=\"M 22,10 C 32.5,11 38.5,18 38,39 L 15,39 C 15,30 25,32.5 23,18\" style=\"fill:#ffffff; stroke:#000000;\" /> <path d=\"M 24,18 C 24.38,20.91 18.45,25.37 16,27 C 13,29 13.18,31.34 11,31 C 9.958,30.06 12.41,27.96 11,28 C 10,28 11.19,29.23 10,30 C 9,30 5.997,31 6,26 C 6,24 12,14 12,14 C 12,14 13.89,12.1 14,10.5 C 13.27,9.506 13.5,8.5 13.5,7.5 C 14.5,6.5 16.5,10 16.5,10 L 18.5,10 C 18.5,10 19.28,8.008 21,7 C 22,7 22,10 22,10\" style=\"fill:#ffffff; stroke:#000000;\" /> <path d=\"M 9.5 25.5 A 0.5 0.5 0 1 1 8.5,25.5 A 0.5 0.5 0 1 1 9.5 25.5 z\" style=\"fill:#000000; stroke:#000000;\" /> <path d=\"M 15 15.5 A 0.5 1.5 0 1 1 14,15.5 A 0.5 1.5 0 1 1 15 15.5 z\" transform=\"matrix(0.866,0.5,-0.5,0.866,9.693,-5.173)\" style=\"fill:#000000; stroke:#000000;\" /> </g> `, bP: svg ` <path d=\"M 22,9 C 19.79,9 18,10.79 18,13 C 18,13.89 18.29,14.71 18.78,15.38 C 16.83,16.5 15.5,18.59 15.5,21 C 15.5,23.03 16.44,24.84 17.91,26.03 C 14.91,27.09 10.5,31.58 10.5,39.5 L 33.5,39.5 C 33.5,31.58 29.09,27.09 26.09,26.03 C 27.56,24.84 28.5,23.03 28.5,21 C 28.5,18.59 27.17,16.5 25.22,15.38 C 25.71,14.71 26,13.89 26,13 C 26,10.79 24.21,9 22,9 z \" style=\"opacity:1; fill:#000000; fill-opacity:1; fill-rule:nonzero; stroke:#000000; stroke-width:1.5; stroke-linecap:round; stroke-linejoin:miter; stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\" /> `, wP: svg ` <path d=\"M 22,9 C 19.79,9 18,10.79 18,13 C 18,13.89 18.29,14.71 18.78,15.38 C 16.83,16.5 15.5,18.59 15.5,21 C 15.5,23.03 16.44,24.84 17.91,26.03 C 14.91,27.09 10.5,31.58 10.5,39.5 L 33.5,39.5 C 33.5,31.58 29.09,27.09 26.09,26.03 C 27.56,24.84 28.5,23.03 28.5,21 C 28.5,18.59 27.17,16.5 25.22,15.38 C 25.71,14.71 26,13.89 26,13 C 26,10.79 24.21,9 22,9 z \" style=\"opacity:1; fill:#ffffff; fill-opacity:1; fill-rule:nonzero; stroke:#000000; stroke-width:1.5; stroke-linecap:round; stroke-linejoin:miter; stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\" /> `, bQ: svg ` <g style=\"opacity:1; fill:000000; fill-opacity:1; fill-rule:evenodd; stroke:#000000; stroke-width:1.5; stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\"> <g style=\"fill:#000000; stroke:none;\"> <circle cx=\"6\" cy=\"12\" r=\"2.75\" /> <circle cx=\"14\" cy=\"9\" r=\"2.75\" /> <circle cx=\"22.5\" cy=\"8\" r=\"2.75\" /> <circle cx=\"31\" cy=\"9\" r=\"2.75\" /> <circle cx=\"39\" cy=\"12\" r=\"2.75\" /> </g> <path d=\"M 9,26 C 17.5,24.5 30,24.5 36,26 L 38.5,13.5 L 31,25 L 30.7,10.9 L 25.5,24.5 L 22.5,10 L 19.5,24.5 L 14.3,10.9 L 14,25 L 6.5,13.5 L 9,26 z\" style=\"stroke-linecap:butt; stroke:#000000;\" /> <path d=\"M 9,26 C 9,28 10.5,28 11.5,30 C 12.5,31.5 12.5,31 12,33.5 C 10.5,34.5 10.5,36 10.5,36 C 9,37.5 11,38.5 11,38.5 C 17.5,39.5 27.5,39.5 34,38.5 C 34,38.5 35.5,37.5 34,36 C 34,36 34.5,34.5 33,33.5 C 32.5,31 32.5,31.5 33.5,30 C 34.5,28 36,28 36,26 C 27.5,24.5 17.5,24.5 9,26 z\" style=\"stroke-linecap:butt;\" /> <path d=\"M 11,38.5 A 35,35 1 0 0 34,38.5\" style=\"fill:none; stroke:#000000; stroke-linecap:butt;\" /> <path d=\"M 11,29 A 35,35 1 0 1 34,29\" style=\"fill:none; stroke:#ffffff;\" /> <path d=\"M 12.5,31.5 L 32.5,31.5\" style=\"fill:none; stroke:#ffffff;\" /> <path d=\"M 11.5,34.5 A 35,35 1 0 0 33.5,34.5\" style=\"fill:none; stroke:#ffffff;\" /> <path d=\"M 10.5,37.5 A 35,35 1 0 0 34.5,37.5\" style=\"fill:none; stroke:#ffffff;\" /> </g> `, wQ: svg ` <g style=\"opacity:1; fill:#ffffff; fill-opacity:1; fill-rule:evenodd; stroke:#000000; stroke-width:1.5; stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\"> <path d=\"M 9 13 A 2 2 0 1 1 5,13 A 2 2 0 1 1 9 13 z\" transform=\"translate(-1,-1)\" /> <path d=\"M 9 13 A 2 2 0 1 1 5,13 A 2 2 0 1 1 9 13 z\" transform=\"translate(15.5,-5.5)\" /> <path d=\"M 9 13 A 2 2 0 1 1 5,13 A 2 2 0 1 1 9 13 z\" transform=\"translate(32,-1)\" /> <path d=\"M 9 13 A 2 2 0 1 1 5,13 A 2 2 0 1 1 9 13 z\" transform=\"translate(7,-4.5)\" /> <path d=\"M 9 13 A 2 2 0 1 1 5,13 A 2 2 0 1 1 9 13 z\" transform=\"translate(24,-4)\" /> <path d=\"M 9,26 C 17.5,24.5 30,24.5 36,26 L 38,14 L 31,25 L 31,11 L 25.5,24.5 L 22.5,9.5 L 19.5,24.5 L 14,10.5 L 14,25 L 7,14 L 9,26 z \" style=\"stroke-linecap:butt;\" /> <path d=\"M 9,26 C 9,28 10.5,28 11.5,30 C 12.5,31.5 12.5,31 12,33.5 C 10.5,34.5 10.5,36 10.5,36 C 9,37.5 11,38.5 11,38.5 C 17.5,39.5 27.5,39.5 34,38.5 C 34,38.5 35.5,37.5 34,36 C 34,36 34.5,34.5 33,33.5 C 32.5,31 32.5,31.5 33.5,30 C 34.5,28 36,28 36,26 C 27.5,24.5 17.5,24.5 9,26 z \" style=\"stroke-linecap:butt;\" /> <path d=\"M 11.5,30 C 15,29 30,29 33.5,30\" style=\"fill:none;\" /> <path d=\"M 12,33.5 C 18,32.5 27,32.5 33,33.5\" style=\"fill:none;\" /> </g> `, bR: svg ` <g style=\"opacity:1; fill:000000; fill-opacity:1; fill-rule:evenodd; stroke:#000000; stroke-width:1.5; stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\"> <path d=\"M 9,39 L 36,39 L 36,36 L 9,36 L 9,39 z \" style=\"stroke-linecap:butt;\" /> <path d=\"M 12.5,32 L 14,29.5 L 31,29.5 L 32.5,32 L 12.5,32 z \" style=\"stroke-linecap:butt;\" /> <path d=\"M 12,36 L 12,32 L 33,32 L 33,36 L 12,36 z \" style=\"stroke-linecap:butt;\" /> <path d=\"M 14,29.5 L 14,16.5 L 31,16.5 L 31,29.5 L 14,29.5 z \" style=\"stroke-linecap:butt;stroke-linejoin:miter;\" /> <path d=\"M 14,16.5 L 11,14 L 34,14 L 31,16.5 L 14,16.5 z \" style=\"stroke-linecap:butt;\" /> <path d=\"M 11,14 L 11,9 L 15,9 L 15,11 L 20,11 L 20,9 L 25,9 L 25,11 L 30,11 L 30,9 L 34,9 L 34,14 L 11,14 z \" style=\"stroke-linecap:butt;\" /> <path d=\"M 12,35.5 L 33,35.5 L 33,35.5\" style=\"fill:none; stroke:#ffffff; stroke-width:1; stroke-linejoin:miter;\" /> <path d=\"M 13,31.5 L 32,31.5\" style=\"fill:none; stroke:#ffffff; stroke-width:1; stroke-linejoin:miter;\" /> <path d=\"M 14,29.5 L 31,29.5\" style=\"fill:none; stroke:#ffffff; stroke-width:1; stroke-linejoin:miter;\" /> <path d=\"M 14,16.5 L 31,16.5\" style=\"fill:none; stroke:#ffffff; stroke-width:1; stroke-linejoin:miter;\" /> <path d=\"M 11,14 L 34,14\" style=\"fill:none; stroke:#ffffff; stroke-width:1; stroke-linejoin:miter;\" /> </g> `, wR: svg ` <g style=\"opacity:1; fill:#ffffff; fill-opacity:1; fill-rule:evenodd; stroke:#000000; stroke-width:1.5; stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\"> <path d=\"M 9,39 L 36,39 L 36,36 L 9,36 L 9,39 z \" style=\"stroke-linecap:butt;\" /> <path d=\"M 12,36 L 12,32 L 33,32 L 33,36 L 12,36 z \" style=\"stroke-linecap:butt;\" /> <path d=\"M 11,14 L 11,9 L 15,9 L 15,11 L 20,11 L 20,9 L 25,9 L 25,11 L 30,11 L 30,9 L 34,9 L 34,14\" style=\"stroke-linecap:butt;\" /> <path d=\"M 34,14 L 31,17 L 14,17 L 11,14\" /> <path d=\"M 31,17 L 31,29.5 L 14,29.5 L 14,17\" style=\"stroke-linecap:butt; stroke-linejoin:miter;\" /> <path d=\"M 31,29.5 L 32.5,32 L 12.5,32 L 14,29.5\" /> <path d=\"M 11,14 L 34,14\" style=\"fill:none; stroke:#000000; stroke-linejoin:miter;\" /> </g> `, }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "renderPiece",
          "declaration": {
            "name": "renderPiece",
            "module": "dist/utils/wikipedia-pieces-svg.js"
          }
        },
        {
          "kind": "js",
          "name": "pieces",
          "declaration": {
            "name": "pieces",
            "module": "dist/utils/wikipedia-pieces-svg.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/chessboard-styles.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "presetColors",
          "type": {
            "text": "object"
          },
          "default": "{ blue: `rgb(0, 110, 255)`, cyan: `rgb(0, 175, 225)`, green: `rgb(0, 200, 0)`, grey: `rgb(127, 127, 127)`, orange: `rgb(255, 127, 0)`, // Not so visible against the standard board. purple: `rgb(200, 0, 100)`, red: `rgb(255, 0, 0)`, yellow: `rgb(225, 200, 0)`, }",
          "description": "Set of preset colors. A preset color can be used by referring to it by starting the color name with `@`,\nfor example `@red`."
        },
        {
          "kind": "variable",
          "name": "styles",
          "default": "css` :root { font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif; font-weight: 400; color-scheme: light dark; font-synthesis: none; text-rendering: optimizeLegibility; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } :host { display: block; position: relative; --dark-color: #b58863; --highlight-color-active: yellow; --highlight-color-available: yellowgreen; --highlight-color-previous: steelblue; --highlight-color-unavailable: gray; --light-color: #f0d9b5; --preset-color-blue: rgb(0, 110, 255); --preset-color-cyan: rgb(0, 175, 225); --preset-color-green: rgb(0, 200, 0); --preset-color-grey: rgb(127, 127, 127); --preset-color-orange: rgb(255, 127, 0); --preset-color-purple: rgb(200, 0, 100); --preset-color-red: rgb(255, 0, 0); --preset-color-yellow: rgb(225, 200, 0); --time-low-color: rgb(175, 0, 0); } [part~='wrapper'] { display: flex; flex-direction: column; align-items: center; justify-content: center; } [part~='board'] { position: relative; border: 2px solid #404040; box-sizing: border-box; display: grid; grid-template-columns: repeat(8, 12.5%); grid-template-rows: repeat(8, 12.5%); } [part~='square'] { position: relative; /* disable any native browser highlighting */ -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; } [part~='piece'] { width: 100%; height: 100%; } [part~='piece'] .piece-image { position: absolute; z-index: 10; } [part~='spare-pieces'] { display: grid; position: relative; padding: 0 2px; grid-template-columns: repeat(8, 12.5%); } [part~='spare-piece'] .piece-image { position: static; cursor: move; cursor: grab; } [part~='game-details'] { display: flex; flex-direction: row; position: relative; overflow: hidden; } [part~='player-details'] { flex: 1 1 0; font-size: inherit; padding-left: 2px; font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif; } [part~='player-name'] { height: 1.25em; line-height: 1.5em; font-size: 0.5em; } [part~='player-turn'] [part~='player-name'] { font-weight: 700; } [part~='player-rating'] { height: 1.5em; font-size: 0.25em; } [part~='player-timer'] { display: flex; flex-direction: row; font-family: Courier, monospace; font-size: 0.5em; line-height: 2em; padding-right: 2px; } [part~='timer-low'] { font-weight: 700; color: var(--time-low-color); } [part~='timer-fraction'] { font-size: 0.8em; line-height: 2.7em; } [part~='dragged-piece'] { display: none; position: absolute; } [part~='white'] { background-color: var(--light-color); color: var(--dark-color); } [part~='black'] { background-color: var(--dark-color); color: var(--light-color); } [part~='draggable'] { cursor: move; cursor: grab; } [part~='disabled'] .piece-image { cursor: default; opacity: 0.5; pointer-events: none; } [part~='highlight-active'] { box-shadow: inset 0 0 1px 5px var(--highlight-color-active); } [part~='highlight-available'] { box-shadow: inset 0 0 1px 5px var(--highlight-color-available); } [part~='highlight-previous'] { box-shadow: inset 0 0 1px 5px var(--highlight-color-previous); } [part~='highlight-unavailable'] { box-shadow: inset 0 0 1px 5px var(--highlight-color-unavailable); } [part~='notation'] { cursor: default; font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif; font-size: 14px; position: absolute; } [part~='alpha'] { bottom: 1%; right: 5%; } [part~='numeric'] { top: 3%; left: 3%; } `"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "presetColors",
          "declaration": {
            "name": "presetColors",
            "module": "src/utils/chessboard-styles.ts"
          }
        },
        {
          "kind": "js",
          "name": "styles",
          "declaration": {
            "name": "styles",
            "module": "src/utils/chessboard-styles.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/index.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "isString",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "s",
              "type": {
                "text": "unknown"
              },
              "description": "Possible string."
            }
          ],
          "description": "Type-safe check to see if a value is a string or not."
        },
        {
          "kind": "function",
          "name": "isFunction",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "f",
              "type": {
                "text": "unknown"
              },
              "description": "Possible function."
            }
          ],
          "description": "Type-safe check to see if a value is a function or not."
        },
        {
          "kind": "function",
          "name": "isInteger",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "n",
              "type": {
                "text": "unknown"
              }
            },
            {
              "description": "Possible number.",
              "name": "s"
            }
          ],
          "description": "Type-safe check to see if a value is a number or not."
        },
        {
          "kind": "function",
          "name": "deepCopy",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "thing",
              "type": {
                "text": "T"
              },
              "description": "Object to copy."
            }
          ],
          "description": "Make a new copy of an object and all its child properties."
        },
        {
          "kind": "function",
          "name": "interpolateTemplate",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "obj",
              "type": {
                "text": "object"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "START_FEN",
          "type": {
            "text": "string"
          },
          "default": "'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR'",
          "description": "CHESS UTILITIES."
        },
        {
          "kind": "variable",
          "name": "COLUMNS"
        },
        {
          "kind": "variable",
          "name": "whitePieces",
          "default": "['wK', 'wQ', 'wR', 'wB', 'wN', 'wP']"
        },
        {
          "kind": "variable",
          "name": "blackPieces",
          "default": "['bK', 'bQ', 'bR', 'bB', 'bN', 'bP']"
        },
        {
          "kind": "function",
          "name": "getSquareColor",
          "parameters": [
            {
              "name": "square",
              "type": {
                "text": "BoardSquare"
              },
              "description": "Square code."
            }
          ],
          "description": "Get the color of the given square.",
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "function",
          "name": "isValidSquare",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "square",
              "type": {
                "text": "unknown"
              },
              "description": "Square code to check."
            }
          ],
          "description": "Check if the given string is a valid board square."
        },
        {
          "kind": "function",
          "name": "isValidMove",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "move",
              "type": {
                "text": "unknown"
              },
              "description": "Move to check."
            }
          ],
          "description": "Check if the given move is valid or not."
        },
        {
          "kind": "function",
          "name": "isValidPieceCode",
          "return": {
            "type": {
              "text": "code is string"
            }
          },
          "parameters": [
            {
              "name": "code",
              "type": {
                "text": "unknown"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "isValidFen",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "fen",
              "type": {
                "text": "unknown"
              },
              "description": "Supposed FEN string."
            }
          ],
          "description": "Check if the given string is a valid FEN position."
        },
        {
          "kind": "function",
          "name": "isValidPositionObject",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "pos",
              "type": {
                "text": "unknown"
              },
              "description": "Supposed valid board position."
            }
          ],
          "description": "Check if the given parameter is a valid board position object."
        },
        {
          "kind": "function",
          "name": "fenToObj",
          "parameters": [
            {
              "name": "fen",
              "type": {
                "text": "string"
              },
              "description": "FEN position string."
            }
          ],
          "description": "Convert a FEN position string into a position object.",
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "variable",
          "name": "START_POSITION",
          "default": "fenToObj(START_FEN)"
        },
        {
          "kind": "function",
          "name": "objToFen",
          "parameters": [
            {
              "name": "obj",
              "type": {
                "text": "BoardPositionObject"
              },
              "description": "Position object."
            }
          ],
          "description": "Convert a position object into a FEN position string.",
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "function",
          "name": "normalizePosition",
          "return": {
            "type": {
              "text": ""
            }
          },
          "parameters": [
            {
              "name": "position",
              "type": {
                "text": "BoardPosition | null"
              },
              "description": "A position object or description; null or empty string means empty board."
            }
          ],
          "description": "Convert a standard `position` description string into a board position object."
        },
        {
          "kind": "function",
          "name": "findClosestPiece",
          "parameters": [
            {
              "name": "position",
              "type": {
                "text": "BoardPositionObject"
              },
              "description": "Board position."
            },
            {
              "name": "piece",
              "type": {
                "text": "ChessPiece"
              },
              "description": "Piece to find."
            },
            {
              "name": "square",
              "type": {
                "text": "BoardSquare"
              },
              "description": "Square to check."
            }
          ],
          "description": "Find the closest instance of given `piece` from the given `square`.",
          "return": {
            "type": {
              "text": ""
            }
          }
        },
        {
          "kind": "function",
          "name": "calculatePositionFromMoves",
          "parameters": [
            {
              "name": "position",
              "type": {
                "text": "BoardPositionObject"
              },
              "description": "Board position to start from."
            },
            {
              "name": "moves",
              "type": {
                "text": "{ [from: string]: string }"
              },
              "description": "List of moves as a object `{ [<from>: square code]: <to>: board square }`."
            }
          ],
          "description": "Get the new board position after the given set of (valid) `moves`.",
          "return": {
            "type": {
              "text": ""
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "StraightArrow",
          "declaration": {
            "name": "StraightArrow",
            "module": "src/utils/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "pieces",
          "declaration": {
            "name": "pieces",
            "module": "src/utils/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "styles",
          "declaration": {
            "name": "styles",
            "module": "src/utils/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "renderPiece",
          "declaration": {
            "name": "renderPiece",
            "module": "src/utils/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "isString",
          "declaration": {
            "name": "isString",
            "module": "src/utils/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "isFunction",
          "declaration": {
            "name": "isFunction",
            "module": "src/utils/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "isInteger",
          "declaration": {
            "name": "isInteger",
            "module": "src/utils/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "deepCopy",
          "declaration": {
            "name": "deepCopy",
            "module": "src/utils/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "interpolateTemplate",
          "declaration": {
            "name": "interpolateTemplate",
            "module": "src/utils/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "START_FEN",
          "declaration": {
            "name": "START_FEN",
            "module": "src/utils/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "COLUMNS",
          "declaration": {
            "name": "COLUMNS",
            "module": "src/utils/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "whitePieces",
          "declaration": {
            "name": "whitePieces",
            "module": "src/utils/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "blackPieces",
          "declaration": {
            "name": "blackPieces",
            "module": "src/utils/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "getSquareColor",
          "declaration": {
            "name": "getSquareColor",
            "module": "src/utils/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "isValidSquare",
          "declaration": {
            "name": "isValidSquare",
            "module": "src/utils/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "isValidMove",
          "declaration": {
            "name": "isValidMove",
            "module": "src/utils/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "isValidPieceCode",
          "declaration": {
            "name": "isValidPieceCode",
            "module": "src/utils/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "isValidFen",
          "declaration": {
            "name": "isValidFen",
            "module": "src/utils/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "isValidPositionObject",
          "declaration": {
            "name": "isValidPositionObject",
            "module": "src/utils/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "fenToObj",
          "declaration": {
            "name": "fenToObj",
            "module": "src/utils/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "START_POSITION",
          "declaration": {
            "name": "START_POSITION",
            "module": "src/utils/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "objToFen",
          "declaration": {
            "name": "objToFen",
            "module": "src/utils/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "normalizePosition",
          "declaration": {
            "name": "normalizePosition",
            "module": "src/utils/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "findClosestPiece",
          "declaration": {
            "name": "findClosestPiece",
            "module": "src/utils/index.ts"
          }
        },
        {
          "kind": "js",
          "name": "calculatePositionFromMoves",
          "declaration": {
            "name": "calculatePositionFromMoves",
            "module": "src/utils/index.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/overlays.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "A marker placed over a square on the board.",
          "name": "SquareMarker",
          "members": [
            {
              "kind": "field",
              "name": "_lineWidth",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "0.125"
            },
            {
              "kind": "field",
              "name": "_square",
              "type": {
                "text": "BoardSquare"
              },
              "privacy": "protected",
              "description": "Square of the marker.",
              "default": "square"
            },
            {
              "kind": "field",
              "name": "_type",
              "type": {
                "text": "MarkerType"
              },
              "privacy": "protected",
              "default": "type"
            },
            {
              "kind": "field",
              "name": "lineWidth",
              "description": "Line width of the marker as a fraction of square size."
            },
            {
              "kind": "method",
              "name": "getSvg"
            },
            {
              "kind": "field",
              "name": "_color",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "description": "Arrow color.",
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_opacity",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "description": "Arrow opacity.",
              "default": "opacity",
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "squareWidth",
              "description": "Width of a single board square in percents.",
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStyles",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "extra",
                  "optional": true,
                  "type": {
                    "text": "{[key: string]: string | number }"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getSquareCoordinates",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "square",
                  "type": {
                    "text": "BoardSquare"
                  },
                  "description": "Square code."
                }
              ],
              "description": "Auxiliary function to convert a `square` code to an array of x,y coordinates.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            }
          ],
          "superclass": {
            "name": "BoardOverlay",
            "module": "src/utils/overlays.ts"
          }
        },
        {
          "kind": "class",
          "description": "Creates a board overlay with an arrow pointing from one square to another. The created arrow always points straight\nfrom the origin to the target, even when the move is not along a board axis.",
          "name": "StraightArrow",
          "members": [
            {
              "kind": "field",
              "name": "_START_OFFSET",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "static": true,
              "default": "0.4"
            },
            {
              "kind": "field",
              "name": "START_OFFSET",
              "static": true,
              "description": "Arrow start distance from the square center as a fraction of square size. Value between `0` and `0.5`.\nValue 0 starts the arrow at the square center and value 0.5 at the square edge (for arrows along a board axis)."
            },
            {
              "kind": "field",
              "name": "START_OFFSET",
              "static": true
            },
            {
              "kind": "field",
              "name": "_TARGET_OFFSET",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "static": true,
              "default": "0.5"
            },
            {
              "kind": "field",
              "name": "TARGET_OFFSET",
              "static": true,
              "description": "Distance of the arrow point from the center of the target square as a fraction of square size.\nValue between `0` and `0.5`. 0 ends the arrow at the center of the target square, while 0.5 ends it at the\ntarget square edge (for arrows along a board axis)."
            },
            {
              "kind": "field",
              "name": "TARGET_OFFSET",
              "static": true
            },
            {
              "kind": "field",
              "name": "_arrowSize",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "0.25"
            },
            {
              "kind": "field",
              "name": "_id",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "description": "Unique ID for matching the arrow head with the shaft.",
              "default": "arrowNr++"
            },
            {
              "kind": "field",
              "name": "_origin",
              "type": {
                "text": "BoardSquare"
              },
              "privacy": "protected",
              "description": "Origin square of the arrow.",
              "default": "origin"
            },
            {
              "kind": "field",
              "name": "_target",
              "type": {
                "text": "BoardSquare"
              },
              "privacy": "protected",
              "description": "Target square of the arrow.",
              "default": "target"
            },
            {
              "kind": "field",
              "name": "arrowSize",
              "description": "Width of the arrow shaft as a fraction of square size."
            },
            {
              "kind": "method",
              "name": "_getStartOffset",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "origin",
                  "type": {
                    "text": "number[]"
                  },
                  "description": "Coordinates for the origin square."
                },
                {
                  "name": "target",
                  "type": {
                    "text": "number[]"
                  },
                  "description": "Coordinates for the target square."
                }
              ],
              "description": "Calculate arrow offset from square center for an angled arrow.",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "method",
              "name": "getSvg",
              "description": "Get SVG markup for the arrow.",
              "return": {
                "type": {
                  "text": ""
                }
              }
            },
            {
              "kind": "field",
              "name": "_color",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "description": "Arrow color.",
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_opacity",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "description": "Arrow opacity.",
              "default": "opacity",
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "squareWidth",
              "description": "Width of a single board square in percents.",
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStyles",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "extra",
                  "optional": true,
                  "type": {
                    "text": "{[key: string]: string | number }"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getSquareCoordinates",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "square",
                  "type": {
                    "text": "BoardSquare"
                  },
                  "description": "Square code."
                }
              ],
              "description": "Auxiliary function to convert a `square` code to an array of x,y coordinates.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            }
          ],
          "superclass": {
            "name": "BoardOverlay",
            "module": "src/utils/overlays.ts"
          }
        },
        {
          "kind": "class",
          "description": "Creates a board overlay with an arrow pointing from one square to another. The arrow shaft(s) will always run along\na board axis, creating a straight angle if needed.",
          "name": "AngledArrow",
          "members": [
            {
              "kind": "method",
              "name": "getSvg",
              "description": "Get SVG markup for the arrow.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_START_OFFSET",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "static": true,
              "default": "0.4",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "START_OFFSET",
              "static": true,
              "description": "Arrow start distance from the square center as a fraction of square size. Value between `0` and `0.5`.\nValue 0 starts the arrow at the square center and value 0.5 at the square edge (for arrows along a board axis).",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_TARGET_OFFSET",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "static": true,
              "default": "0.5",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "TARGET_OFFSET",
              "static": true,
              "description": "Distance of the arrow point from the center of the target square as a fraction of square size.\nValue between `0` and `0.5`. 0 ends the arrow at the center of the target square, while 0.5 ends it at the\ntarget square edge (for arrows along a board axis).",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_arrowSize",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "0.25",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_id",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "description": "Unique ID for matching the arrow head with the shaft.",
              "default": "arrowNr++",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_origin",
              "type": {
                "text": "BoardSquare"
              },
              "privacy": "protected",
              "description": "Origin square of the arrow.",
              "default": "origin",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_target",
              "type": {
                "text": "BoardSquare"
              },
              "privacy": "protected",
              "description": "Target square of the arrow.",
              "default": "target",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "arrowSize",
              "description": "Width of the arrow shaft as a fraction of square size.",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getStartOffset",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "origin",
                  "type": {
                    "text": "number[]"
                  },
                  "description": "Coordinates for the origin square."
                },
                {
                  "name": "target",
                  "type": {
                    "text": "number[]"
                  },
                  "description": "Coordinates for the target square."
                }
              ],
              "description": "Calculate arrow offset from square center for an angled arrow.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_color",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "description": "Arrow color.",
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_opacity",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "description": "Arrow opacity.",
              "default": "opacity",
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "squareWidth",
              "description": "Width of a single board square in percents.",
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStyles",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "extra",
                  "optional": true,
                  "type": {
                    "text": "{[key: string]: string | number }"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getSquareCoordinates",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "square",
                  "type": {
                    "text": "BoardSquare"
                  },
                  "description": "Square code."
                }
              ],
              "description": "Auxiliary function to convert a `square` code to an array of x,y coordinates.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            }
          ],
          "superclass": {
            "name": "StraightArrow",
            "module": "src/utils/overlays.ts"
          }
        },
        {
          "kind": "class",
          "description": "",
          "name": "PathArrow",
          "members": [
            {
              "kind": "field",
              "name": "_path",
              "type": {
                "text": "BoardSquare[]"
              },
              "privacy": "protected",
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "getSvg",
              "description": "Get SVG markup for the arrow.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_START_OFFSET",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "static": true,
              "default": "0.4",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "START_OFFSET",
              "static": true,
              "description": "Arrow start distance from the square center as a fraction of square size. Value between `0` and `0.5`.\nValue 0 starts the arrow at the square center and value 0.5 at the square edge (for arrows along a board axis).",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_TARGET_OFFSET",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "static": true,
              "default": "0.5",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "TARGET_OFFSET",
              "static": true,
              "description": "Distance of the arrow point from the center of the target square as a fraction of square size.\nValue between `0` and `0.5`. 0 ends the arrow at the center of the target square, while 0.5 ends it at the\ntarget square edge (for arrows along a board axis).",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_arrowSize",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "default": "0.25",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_id",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "description": "Unique ID for matching the arrow head with the shaft.",
              "default": "arrowNr++",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_origin",
              "type": {
                "text": "BoardSquare"
              },
              "privacy": "protected",
              "description": "Origin square of the arrow.",
              "default": "origin",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_target",
              "type": {
                "text": "BoardSquare"
              },
              "privacy": "protected",
              "description": "Target square of the arrow.",
              "default": "target",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "arrowSize",
              "description": "Width of the arrow shaft as a fraction of square size.",
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getStartOffset",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "origin",
                  "type": {
                    "text": "number[]"
                  },
                  "description": "Coordinates for the origin square."
                },
                {
                  "name": "target",
                  "type": {
                    "text": "number[]"
                  },
                  "description": "Coordinates for the target square."
                }
              ],
              "description": "Calculate arrow offset from square center for an angled arrow.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "StraightArrow",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_color",
              "type": {
                "text": "string"
              },
              "privacy": "protected",
              "description": "Arrow color.",
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "_opacity",
              "type": {
                "text": "number"
              },
              "privacy": "protected",
              "description": "Arrow opacity.",
              "default": "opacity",
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "field",
              "name": "squareWidth",
              "description": "Width of a single board square in percents.",
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "method",
              "name": "getStyles",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "extra",
                  "optional": true,
                  "type": {
                    "text": "{[key: string]: string | number }"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            },
            {
              "kind": "method",
              "name": "_getSquareCoordinates",
              "privacy": "protected",
              "parameters": [
                {
                  "name": "square",
                  "type": {
                    "text": "BoardSquare"
                  },
                  "description": "Square code."
                }
              ],
              "description": "Auxiliary function to convert a `square` code to an array of x,y coordinates.",
              "return": {
                "type": {
                  "text": ""
                }
              },
              "inheritedFrom": {
                "name": "BoardOverlay",
                "module": "src/utils/overlays.ts"
              }
            }
          ],
          "superclass": {
            "name": "StraightArrow",
            "module": "src/utils/overlays.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "SquareMarker",
          "declaration": {
            "name": "SquareMarker",
            "module": "src/utils/overlays.ts"
          }
        },
        {
          "kind": "js",
          "name": "StraightArrow",
          "declaration": {
            "name": "StraightArrow",
            "module": "src/utils/overlays.ts"
          }
        },
        {
          "kind": "js",
          "name": "AngledArrow",
          "declaration": {
            "name": "AngledArrow",
            "module": "src/utils/overlays.ts"
          }
        },
        {
          "kind": "js",
          "name": "PathArrow",
          "declaration": {
            "name": "PathArrow",
            "module": "src/utils/overlays.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/utils/wikipedia-pieces-svg.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "renderPiece",
          "parameters": [
            {
              "name": "piece",
              "type": {
                "text": "ChessPiece"
              }
            },
            {
              "name": "container",
              "type": {
                "text": "HTMLElement"
              }
            }
          ]
        },
        {
          "kind": "variable",
          "name": "pieces",
          "type": {
            "text": "{ [p: string]: TemplateResult }"
          },
          "default": "{ bB: svg` <g style=\"opacity:1; fill:none; fill-rule:evenodd; fill-opacity:1; stroke:#000000; stroke-width:1.5; stroke-linecap:round; stroke-linejoin:round; stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\"> <g style=\"fill:#000000; stroke:#000000; stroke-linecap:butt;\"> <path d=\"M 9,36 C 12.39,35.03 19.11,36.43 22.5,34 C 25.89,36.43 32.61,35.03 36,36 C 36,36 37.65,36.54 39,38 C 38.32,38.97 37.35,38.99 36,38.5 C 32.61,37.53 25.89,38.96 22.5,37.5 C 19.11,38.96 12.39,37.53 9,38.5 C 7.646,38.99 6.677,38.97 6,38 C 7.354,36.06 9,36 9,36 z\" /> <path d=\"M 15,32 C 17.5,34.5 27.5,34.5 30,32 C 30.5,30.5 30,30 30,30 C 30,27.5 27.5,26 27.5,26 C 33,24.5 33.5,14.5 22.5,10.5 C 11.5,14.5 12,24.5 17.5,26 C 17.5,26 15,27.5 15,30 C 15,30 14.5,30.5 15,32 z\" /> <path d=\"M 25 8 A 2.5 2.5 0 1 1 20,8 A 2.5 2.5 0 1 1 25 8 z\" /> </g> <path d=\"M 17.5,26 L 27.5,26 M 15,30 L 30,30 M 22.5,15.5 L 22.5,20.5 M 20,18 L 25,18\" style=\"fill:none; stroke:#ffffff; stroke-linejoin:miter;\" /> </g> `, wB: svg` <g style=\"opacity:1; fill:none; fill-rule:evenodd; fill-opacity:1; stroke:#000000; stroke-width:1.5; stroke-linecap:round; stroke-linejoin:round; stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\"> <g style=\"fill:#ffffff; stroke:#000000; stroke-linecap:butt;\"> <path d=\"M 9,36 C 12.39,35.03 19.11,36.43 22.5,34 C 25.89,36.43 32.61,35.03 36,36 C 36,36 37.65,36.54 39,38 C 38.32,38.97 37.35,38.99 36,38.5 C 32.61,37.53 25.89,38.96 22.5,37.5 C 19.11,38.96 12.39,37.53 9,38.5 C 7.646,38.99 6.677,38.97 6,38 C 7.354,36.06 9,36 9,36 z\" /> <path d=\"M 15,32 C 17.5,34.5 27.5,34.5 30,32 C 30.5,30.5 30,30 30,30 C 30,27.5 27.5,26 27.5,26 C 33,24.5 33.5,14.5 22.5,10.5 C 11.5,14.5 12,24.5 17.5,26 C 17.5,26 15,27.5 15,30 C 15,30 14.5,30.5 15,32 z\" /> <path d=\"M 25 8 A 2.5 2.5 0 1 1 20,8 A 2.5 2.5 0 1 1 25 8 z\" /> </g> <path d=\"M 17.5,26 L 27.5,26 M 15,30 L 30,30 M 22.5,15.5 L 22.5,20.5 M 20,18 L 25,18\" style=\"fill:none; stroke:#000000; stroke-linejoin:miter;\" /> </g> `, bK: svg` <g style=\"fill:none; fill-opacity:1; fill-rule:evenodd; stroke:#000000; stroke-width:1.5; stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\"> <path d=\"M 22.5,11.63 L 22.5,6\" style=\"fill:none; stroke:#000000; stroke-linejoin:miter;\" id=\"path6570\" /> <path d=\"M 22.5,25 C 22.5,25 27,17.5 25.5,14.5 C 25.5,14.5 24.5,12 22.5,12 C 20.5,12 19.5,14.5 19.5,14.5 C 18,17.5 22.5,25 22.5,25\" style=\"fill:#000000;fill-opacity:1; stroke-linecap:butt; stroke-linejoin:miter;\" /> <path d=\"M 11.5,37 C 17,40.5 27,40.5 32.5,37 L 32.5,30 C 32.5,30 41.5,25.5 38.5,19.5 C 34.5,13 25,16 22.5,23.5 L 22.5,27 L 22.5,23.5 C 19,16 9.5,13 6.5,19.5 C 3.5,25.5 11.5,29.5 11.5,29.5 L 11.5,37 z \" style=\"fill:#000000; stroke:#000000;\" /> <path d=\"M 20,8 L 25,8\" style=\"fill:none; stroke:#000000; stroke-linejoin:miter;\" /> <path d=\"M 32,29.5 C 32,29.5 40.5,25.5 38.03,19.85 C 34.15,14 25,18 22.5,24.5 L 22.51,26.6 L 22.5,24.5 C 20,18 9.906,14 6.997,19.85 C 4.5,25.5 11.85,28.85 11.85,28.85\" style=\"fill:none; stroke:#ffffff;\" /> <path d=\"M 11.5,30 C 17,27 27,27 32.5,30 M 11.5,33.5 C 17,30.5 27,30.5 32.5,33.5 M 11.5,37 C 17,34 27,34 32.5,37\" style=\"fill:none; stroke:#ffffff;\" /> </g> `, wK: svg` <g style=\"fill:none; fill-opacity:1; fill-rule:evenodd; stroke:#000000; stroke-width:1.5; stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\"> <path d=\"M 22.5,11.63 L 22.5,6\" style=\"fill:none; stroke:#000000; stroke-linejoin:miter;\" /> <path d=\"M 20,8 L 25,8\" style=\"fill:none; stroke:#000000; stroke-linejoin:miter;\" /> <path d=\"M 22.5,25 C 22.5,25 27,17.5 25.5,14.5 C 25.5,14.5 24.5,12 22.5,12 C 20.5,12 19.5,14.5 19.5,14.5 C 18,17.5 22.5,25 22.5,25\" style=\"fill:#ffffff; stroke:#000000; stroke-linecap:butt; stroke-linejoin:miter;\" /> <path d=\"M 11.5,37 C 17,40.5 27,40.5 32.5,37 L 32.5,30 C 32.5,30 41.5,25.5 38.5,19.5 C 34.5,13 25,16 22.5,23.5 L 22.5,27 L 22.5,23.5 C 19,16 9.5,13 6.5,19.5 C 3.5,25.5 11.5,29.5 11.5,29.5 L 11.5,37 z \" style=\"fill:#ffffff; stroke:#000000;\" /> <path d=\"M 11.5,30 C 17,27 27,27 32.5,30\" style=\"fill:none; stroke:#000000;\" /> <path d=\"M 11.5,33.5 C 17,30.5 27,30.5 32.5,33.5\" style=\"fill:none; stroke:#000000;\" /> <path d=\"M 11.5,37 C 17,34 27,34 32.5,37\" style=\"fill:none; stroke:#000000;\" /> </g> `, bN: svg` <g style=\"opacity:1; fill:none; fill-opacity:1; fill-rule:evenodd; stroke:#000000; stroke-width:1.5; stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\"> <path d=\"M 22,10 C 32.5,11 38.5,18 38,39 L 15,39 C 15,30 25,32.5 23,18\" style=\"fill:#000000; stroke:#000000;\" /> <path d=\"M 24,18 C 24.38,20.91 18.45,25.37 16,27 C 13,29 13.18,31.34 11,31 C 9.958,30.06 12.41,27.96 11,28 C 10,28 11.19,29.23 10,30 C 9,30 5.997,31 6,26 C 6,24 12,14 12,14 C 12,14 13.89,12.1 14,10.5 C 13.27,9.506 13.5,8.5 13.5,7.5 C 14.5,6.5 16.5,10 16.5,10 L 18.5,10 C 18.5,10 19.28,8.008 21,7 C 22,7 22,10 22,10\" style=\"fill:#000000; stroke:#000000;\" /> <path d=\"M 9.5 25.5 A 0.5 0.5 0 1 1 8.5,25.5 A 0.5 0.5 0 1 1 9.5 25.5 z\" style=\"fill:#ffffff; stroke:#ffffff;\" /> <path d=\"M 15 15.5 A 0.5 1.5 0 1 1 14,15.5 A 0.5 1.5 0 1 1 15 15.5 z\" transform=\"matrix(0.866,0.5,-0.5,0.866,9.693,-5.173)\" style=\"fill:#ffffff; stroke:#ffffff;\" /> <path d=\"M 24.55,10.4 L 24.1,11.85 L 24.6,12 C 27.75,13 30.25,14.49 32.5,18.75 C 34.75,23.01 35.75,29.06 35.25,39 L 35.2,39.5 L 37.45,39.5 L 37.5,39 C 38,28.94 36.62,22.15 34.25,17.66 C 31.88,13.17 28.46,11.02 25.06,10.5 L 24.55,10.4 z \" style=\"fill:#ffffff; stroke:none;\" /> </g> `, wN: svg` <g style=\"opacity:1; fill:none; fill-opacity:1; fill-rule:evenodd; stroke:#000000; stroke-width:1.5; stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\"> <path d=\"M 22,10 C 32.5,11 38.5,18 38,39 L 15,39 C 15,30 25,32.5 23,18\" style=\"fill:#ffffff; stroke:#000000;\" /> <path d=\"M 24,18 C 24.38,20.91 18.45,25.37 16,27 C 13,29 13.18,31.34 11,31 C 9.958,30.06 12.41,27.96 11,28 C 10,28 11.19,29.23 10,30 C 9,30 5.997,31 6,26 C 6,24 12,14 12,14 C 12,14 13.89,12.1 14,10.5 C 13.27,9.506 13.5,8.5 13.5,7.5 C 14.5,6.5 16.5,10 16.5,10 L 18.5,10 C 18.5,10 19.28,8.008 21,7 C 22,7 22,10 22,10\" style=\"fill:#ffffff; stroke:#000000;\" /> <path d=\"M 9.5 25.5 A 0.5 0.5 0 1 1 8.5,25.5 A 0.5 0.5 0 1 1 9.5 25.5 z\" style=\"fill:#000000; stroke:#000000;\" /> <path d=\"M 15 15.5 A 0.5 1.5 0 1 1 14,15.5 A 0.5 1.5 0 1 1 15 15.5 z\" transform=\"matrix(0.866,0.5,-0.5,0.866,9.693,-5.173)\" style=\"fill:#000000; stroke:#000000;\" /> </g> `, bP: svg` <path d=\"M 22,9 C 19.79,9 18,10.79 18,13 C 18,13.89 18.29,14.71 18.78,15.38 C 16.83,16.5 15.5,18.59 15.5,21 C 15.5,23.03 16.44,24.84 17.91,26.03 C 14.91,27.09 10.5,31.58 10.5,39.5 L 33.5,39.5 C 33.5,31.58 29.09,27.09 26.09,26.03 C 27.56,24.84 28.5,23.03 28.5,21 C 28.5,18.59 27.17,16.5 25.22,15.38 C 25.71,14.71 26,13.89 26,13 C 26,10.79 24.21,9 22,9 z \" style=\"opacity:1; fill:#000000; fill-opacity:1; fill-rule:nonzero; stroke:#000000; stroke-width:1.5; stroke-linecap:round; stroke-linejoin:miter; stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\" /> `, wP: svg` <path d=\"M 22,9 C 19.79,9 18,10.79 18,13 C 18,13.89 18.29,14.71 18.78,15.38 C 16.83,16.5 15.5,18.59 15.5,21 C 15.5,23.03 16.44,24.84 17.91,26.03 C 14.91,27.09 10.5,31.58 10.5,39.5 L 33.5,39.5 C 33.5,31.58 29.09,27.09 26.09,26.03 C 27.56,24.84 28.5,23.03 28.5,21 C 28.5,18.59 27.17,16.5 25.22,15.38 C 25.71,14.71 26,13.89 26,13 C 26,10.79 24.21,9 22,9 z \" style=\"opacity:1; fill:#ffffff; fill-opacity:1; fill-rule:nonzero; stroke:#000000; stroke-width:1.5; stroke-linecap:round; stroke-linejoin:miter; stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\" /> `, bQ: svg` <g style=\"opacity:1; fill:000000; fill-opacity:1; fill-rule:evenodd; stroke:#000000; stroke-width:1.5; stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\"> <g style=\"fill:#000000; stroke:none;\"> <circle cx=\"6\" cy=\"12\" r=\"2.75\" /> <circle cx=\"14\" cy=\"9\" r=\"2.75\" /> <circle cx=\"22.5\" cy=\"8\" r=\"2.75\" /> <circle cx=\"31\" cy=\"9\" r=\"2.75\" /> <circle cx=\"39\" cy=\"12\" r=\"2.75\" /> </g> <path d=\"M 9,26 C 17.5,24.5 30,24.5 36,26 L 38.5,13.5 L 31,25 L 30.7,10.9 L 25.5,24.5 L 22.5,10 L 19.5,24.5 L 14.3,10.9 L 14,25 L 6.5,13.5 L 9,26 z\" style=\"stroke-linecap:butt; stroke:#000000;\" /> <path d=\"M 9,26 C 9,28 10.5,28 11.5,30 C 12.5,31.5 12.5,31 12,33.5 C 10.5,34.5 10.5,36 10.5,36 C 9,37.5 11,38.5 11,38.5 C 17.5,39.5 27.5,39.5 34,38.5 C 34,38.5 35.5,37.5 34,36 C 34,36 34.5,34.5 33,33.5 C 32.5,31 32.5,31.5 33.5,30 C 34.5,28 36,28 36,26 C 27.5,24.5 17.5,24.5 9,26 z\" style=\"stroke-linecap:butt;\" /> <path d=\"M 11,38.5 A 35,35 1 0 0 34,38.5\" style=\"fill:none; stroke:#000000; stroke-linecap:butt;\" /> <path d=\"M 11,29 A 35,35 1 0 1 34,29\" style=\"fill:none; stroke:#ffffff;\" /> <path d=\"M 12.5,31.5 L 32.5,31.5\" style=\"fill:none; stroke:#ffffff;\" /> <path d=\"M 11.5,34.5 A 35,35 1 0 0 33.5,34.5\" style=\"fill:none; stroke:#ffffff;\" /> <path d=\"M 10.5,37.5 A 35,35 1 0 0 34.5,37.5\" style=\"fill:none; stroke:#ffffff;\" /> </g> `, wQ: svg` <g style=\"opacity:1; fill:#ffffff; fill-opacity:1; fill-rule:evenodd; stroke:#000000; stroke-width:1.5; stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\"> <path d=\"M 9 13 A 2 2 0 1 1 5,13 A 2 2 0 1 1 9 13 z\" transform=\"translate(-1,-1)\" /> <path d=\"M 9 13 A 2 2 0 1 1 5,13 A 2 2 0 1 1 9 13 z\" transform=\"translate(15.5,-5.5)\" /> <path d=\"M 9 13 A 2 2 0 1 1 5,13 A 2 2 0 1 1 9 13 z\" transform=\"translate(32,-1)\" /> <path d=\"M 9 13 A 2 2 0 1 1 5,13 A 2 2 0 1 1 9 13 z\" transform=\"translate(7,-4.5)\" /> <path d=\"M 9 13 A 2 2 0 1 1 5,13 A 2 2 0 1 1 9 13 z\" transform=\"translate(24,-4)\" /> <path d=\"M 9,26 C 17.5,24.5 30,24.5 36,26 L 38,14 L 31,25 L 31,11 L 25.5,24.5 L 22.5,9.5 L 19.5,24.5 L 14,10.5 L 14,25 L 7,14 L 9,26 z \" style=\"stroke-linecap:butt;\" /> <path d=\"M 9,26 C 9,28 10.5,28 11.5,30 C 12.5,31.5 12.5,31 12,33.5 C 10.5,34.5 10.5,36 10.5,36 C 9,37.5 11,38.5 11,38.5 C 17.5,39.5 27.5,39.5 34,38.5 C 34,38.5 35.5,37.5 34,36 C 34,36 34.5,34.5 33,33.5 C 32.5,31 32.5,31.5 33.5,30 C 34.5,28 36,28 36,26 C 27.5,24.5 17.5,24.5 9,26 z \" style=\"stroke-linecap:butt;\" /> <path d=\"M 11.5,30 C 15,29 30,29 33.5,30\" style=\"fill:none;\" /> <path d=\"M 12,33.5 C 18,32.5 27,32.5 33,33.5\" style=\"fill:none;\" /> </g> `, bR: svg` <g style=\"opacity:1; fill:000000; fill-opacity:1; fill-rule:evenodd; stroke:#000000; stroke-width:1.5; stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\"> <path d=\"M 9,39 L 36,39 L 36,36 L 9,36 L 9,39 z \" style=\"stroke-linecap:butt;\" /> <path d=\"M 12.5,32 L 14,29.5 L 31,29.5 L 32.5,32 L 12.5,32 z \" style=\"stroke-linecap:butt;\" /> <path d=\"M 12,36 L 12,32 L 33,32 L 33,36 L 12,36 z \" style=\"stroke-linecap:butt;\" /> <path d=\"M 14,29.5 L 14,16.5 L 31,16.5 L 31,29.5 L 14,29.5 z \" style=\"stroke-linecap:butt;stroke-linejoin:miter;\" /> <path d=\"M 14,16.5 L 11,14 L 34,14 L 31,16.5 L 14,16.5 z \" style=\"stroke-linecap:butt;\" /> <path d=\"M 11,14 L 11,9 L 15,9 L 15,11 L 20,11 L 20,9 L 25,9 L 25,11 L 30,11 L 30,9 L 34,9 L 34,14 L 11,14 z \" style=\"stroke-linecap:butt;\" /> <path d=\"M 12,35.5 L 33,35.5 L 33,35.5\" style=\"fill:none; stroke:#ffffff; stroke-width:1; stroke-linejoin:miter;\" /> <path d=\"M 13,31.5 L 32,31.5\" style=\"fill:none; stroke:#ffffff; stroke-width:1; stroke-linejoin:miter;\" /> <path d=\"M 14,29.5 L 31,29.5\" style=\"fill:none; stroke:#ffffff; stroke-width:1; stroke-linejoin:miter;\" /> <path d=\"M 14,16.5 L 31,16.5\" style=\"fill:none; stroke:#ffffff; stroke-width:1; stroke-linejoin:miter;\" /> <path d=\"M 11,14 L 34,14\" style=\"fill:none; stroke:#ffffff; stroke-width:1; stroke-linejoin:miter;\" /> </g> `, wR: svg` <g style=\"opacity:1; fill:#ffffff; fill-opacity:1; fill-rule:evenodd; stroke:#000000; stroke-width:1.5; stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4; stroke-dasharray:none; stroke-opacity:1;\"> <path d=\"M 9,39 L 36,39 L 36,36 L 9,36 L 9,39 z \" style=\"stroke-linecap:butt;\" /> <path d=\"M 12,36 L 12,32 L 33,32 L 33,36 L 12,36 z \" style=\"stroke-linecap:butt;\" /> <path d=\"M 11,14 L 11,9 L 15,9 L 15,11 L 20,11 L 20,9 L 25,9 L 25,11 L 30,11 L 30,9 L 34,9 L 34,14\" style=\"stroke-linecap:butt;\" /> <path d=\"M 34,14 L 31,17 L 14,17 L 11,14\" /> <path d=\"M 31,17 L 31,29.5 L 14,29.5 L 14,17\" style=\"stroke-linecap:butt; stroke-linejoin:miter;\" /> <path d=\"M 31,29.5 L 32.5,32 L 12.5,32 L 14,29.5\" /> <path d=\"M 11,14 L 34,14\" style=\"fill:none; stroke:#000000; stroke-linejoin:miter;\" /> </g> `, }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "renderPiece",
          "declaration": {
            "name": "renderPiece",
            "module": "src/utils/wikipedia-pieces-svg.ts"
          }
        },
        {
          "kind": "js",
          "name": "pieces",
          "declaration": {
            "name": "pieces",
            "module": "src/utils/wikipedia-pieces-svg.ts"
          }
        }
      ]
    }
  ]
}
